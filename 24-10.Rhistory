sink("query_stats.txt")
query_stats
sink()
# Filter from the result list the output of those queries that produced no result
# filtrar de la lista de resultados los outputs de aquellas queries que no devuelven resultado
queries_with_results<- rowSums(query_stats[,c(2,3)])>0
queries_with_results
retrieved_results<-query_result$result[queries_with_results]
retrieved_results  # CUIDADO esto cuelga R con datos masivos
sink("retrieved_results.txt")
retrieved_results
sink()
class(retrieved_results)
results_DF <- do.call(rbind.data.frame, retrieved_results)
sink("results_DF")
results_DF
sink()
class(results_DF)
# test<-data.frame(retrieved_results[[1]]$id,retrieved_results[[1]]$name,retrieved_results[[1]]$description,retrieved_results[[1]]$drugInteractions)
test<-data.frame(retrieved_results[[1]]$id,retrieved_results[[1]]$name,retrieved_results[[1]]$description)
test
sink("tessst.txt")
test
sink()
# EJEMPLO 1 DEL API
# Ejemplo usando la primera variante
# que encontramos en el VCF file usado como ejemplo
#### first variant found in the VCF file used as example
#### -> chr1 - 18149476 - Ref:G and Alt:A
# COn este link obtenemos anotaci√≥n para la variante seleccionada
# "http://bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/v4/hsapiens/genomic/variant/1%3A18149476%3AG%3AA/annotation?limit=-1&skip=-1&count=false&Output%20format=json&normalize=false
# version corta :
# http://bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/v4/hsapiens/genomic/variant/1%3A18149476%3AG%3AA/annotation
library(RCurl)
library(jsonlite)
# guardar el enlace en el objeto query. Para eso se usa la funcion geturl de Rcurl, que descarga URLs
query<-getURL("http://bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/v4/hsapiens/genomic/variant/1%3A18149476%3AG%3AA/annotation")
# esta direccion se puede pegar en el navegador para ver la pinta que tiene
# TEST CON OTRA URL
# query <-getURL("bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/latest/hsapiens/genomic/region/1:18149476-18149476/gene")
# en esta query tenemos lo que es el JSON. Tipo : Large character
query # podemos mostrar el JSON en pantalla
sink("query.txt")
query
sink()
# almacenamos el contenido json de la url en un objeto tipo lista
# este objeto contiene pues toda la informacion de los genes solicitados
querydf<-fromJSON(query)
querydf # CUIDADO esto cuelga R con datos masivos
sink("querydf.txt")
querydf
sink()
## NOTA : warning, error y response estan en la primera linea de la URL
## NOTA : el contenido response es todo el resto
#Get any warnings that may be worth noting
query_warnings<-querydf$warning
#Get any errors produced by the query
query_errors<-querydf$error
# conseguir la respuesta a la query
# nos da un query_result de 3 observaciones (los genes) de 9 variables
query_result<-querydf$response
query_result  # CUIDADO esto cuelga R con datos masivos
sink("query_result.txt")
query_result
sink()
# Create a table with the number of responses from each of the queries:
# crear una tabla con el numero de respuestas para cada una de las queries
query_stats<-data.frame(query_result[c("id","numTotalResults","numResults")])
names(query_stats)[1]<-"query"
query_stats
sink("query_stats.txt")
query_stats
sink()
# Filter from the result list the output of those queries that produced no result
# filtrar de la lista de resultados los outputs de aquellas queries que no devuelven resultado
queries_with_results<- rowSums(query_stats[,c(2,3)])>0
queries_with_results
retrieved_results<-query_result$result[queries_with_results]
retrieved_results  # CUIDADO esto cuelga R con datos masivos
sink("retrieved_results.txt")
retrieved_results
sink()
class(retrieved_results)
results_DF <- do.call(rbind.data.frame, retrieved_results)
sink("results_DF")
results_DF
sink()
class(results_DF)
# test<-data.frame(retrieved_results[[1]]$id,retrieved_results[[1]]$name,retrieved_results[[1]]$description,retrieved_results[[1]]$drugInteractions)
test<-data.frame(retrieved_results[[1]]$id,retrieved_results[[1]]$name,retrieved_results[[1]]$description)
test
sink("tessst.txt")
test
sink()
asFrame <- do.call("rbind.fill", lapply(querydf, as.data.frame))
asDataFrame <- fromJSON(query) %>% as.data.frame
install.packages("magrittr")
install.packages("data.tree")
library(RinR)
install.packages("RinR")
R.Version()
library(cellbaseR)
try(cb <- CellBaseR())
variant <- "1:169549811:A:G"
try(res2 <- getVariant(object=cb, ids=variant, resource="annotation"))
res2 <- cbData(res2)
str(res2, 1)
testRinRresult <- res2
query<-getURL("bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/latest/hsapiens/feature/gene/BRCA2,BRCA1,KRAS/info")
library(RCurl)
library(jsonlite)
query<-getURL("bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/latest/hsapiens/feature/gene/BRCA2,BRCA1,KRAS/info")
query<-getURL("bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/latest/hsapiens/feature/gene/BRCA2,BRCA1,KRAS/info")
query # podemos mostrar el JSON en pantalla
querydf<-fromJSON(query)
query_warnings<-querydf$warning
query_errors<-querydf$error
query_result<-querydf$response
query_stats<-data.frame(query_result[c("id","numTotalResults","numResults")])
names(query_stats)[1]<-"query"
query_stats
queries_with_results<- rowSums(query_stats[,c(2,3)])>0
queries_with_results
retrieved_results<-query_result$result[queries_with_results]
test<-data.frame(retrieved_results[[1]]$id,retrieved_results[[1]]$name,retrieved_results[[1]]$description,retrieved_results[[1]]$drugInteractions)
test
View(test)
View(test)
swagger_URL <- getURL("http://bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/swagger.json")
swagger_JSON <-fromJSON(swagger_URL)
############# [INFO] [NOT STARTED] Ask the user to choose a particular GET (path) ###############
# This part will probably be done in Spotify (TIBCO)
############# [CODE] [IN PROGRESS] Get the filter parameters from a particular path ###############
# The idea would be to reach the "parameters" level
# to retrieve all the paramater for a particular given link
# In this DRAFT, we will use a specific path as an example.
# But the idea would be that the USER itself would choose the path he wants
# and then the script will return the availables parameters.
# Idealy, the path chosen by User would be stored in a variable :
# In this DRAFT, we will use the path "variant annotation" as an example.
chosen_path <- '/{version}/{species}/genomic/variant/{variants}/annotation'
# Create a list with the paths and theis content:
paths_JSON <- swagger_JSON$paths
# paths_JSON # this line is for testing
# Create a list with all the content of the choosen path (try 1)
# The following code does not work but why ?
chosen_path <-  paths_JSON$chosen_path
# chosen_path # this line is for testing
# Create a list with all the content of the choosen path (try 2)
# This code works but it is limited because the path is pre-chosen
var_annot_path <- paths_JSON$`/{version}/{species}/genomic/variant/{variants}/annotation`
# map(var_annot_path, names) # this line is for testing
parameters_list <- var_annot_path$get$parameters
# parameters_list # this line is for testing
param_list_length <- length(parameters_list)
param_name_vector <- character()
param_descr_vector <- character()
library(RCurl)
library(jsonlite)
# For map function
library(purrr)
library(tidyverse)
library(rjson)
############# [CODE] Get the main Swagger.json from CELLBASE ###############
swagger_URL <- getURL("http://bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/swagger.json")
swagger_JSON <-fromJSON(swagger_URL)
############# [INFO] [NOT STARTED] Ask the user to choose a particular GET (path) ###############
# This part will probably be done in Spotify (TIBCO)
############# [CODE] [IN PROGRESS] Get the filter parameters from a particular path ###############
# The idea would be to reach the "parameters" level
# to retrieve all the paramater for a particular given link
# In this DRAFT, we will use a specific path as an example.
# But the idea would be that the USER itself would choose the path he wants
# and then the script will return the availables parameters.
# Idealy, the path chosen by User would be stored in a variable :
# In this DRAFT, we will use the path "variant annotation" as an example.
chosen_path <- '/{version}/{species}/genomic/variant/{variants}/annotation'
# Create a list with the paths and theis content:
paths_JSON <- swagger_JSON$paths
# paths_JSON # this line is for testing
# Create a list with all the content of the choosen path (try 1)
# The following code does not work but why ?
chosen_path <-  paths_JSON$chosen_path
# chosen_path # this line is for testing
# Create a list with all the content of the choosen path (try 2)
# This code works but it is limited because the path is pre-chosen
var_annot_path <- paths_JSON$`/{version}/{species}/genomic/variant/{variants}/annotation`
# map(var_annot_path, names) # this line is for testing
parameters_list <- var_annot_path$get$parameters
# parameters_list # this line is for testing
param_list_length <- length(parameters_list)
param_name_vector <- character()
param_descr_vector <- character()
for (i in 1:param_list_length){
one_param <- parameters_list[[i]]
param_name <- one_param$name
param_description <- one_param$description
param_name_vector <- c(param_name_vector, param_name)
param_descr_vector <- c(param_descr_vector, param_description)
}
param_name_vector
param_descr_vector
param_mtrx <- cbind(param_name_vector, param_descr_vector)
param_mtrx
View(param_mtrx)
############# [CODE] Get the main Swagger.json from CELLBASE ###############
swagger_URL <- getURL("http://bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/swagger.json")
swagger_JSON <-fromJSON(swagger_URL)
############# [INFO] [NOT STARTED] Ask the user to choose a particular GET (path) ###############
# This part will probably be done in Spotify (TIBCO)
############# [CODE] [IN PROGRESS] Get the filter parameters from a particular path ###############
# The idea would be to reach the "parameters" level
# to retrieve all the paramater for a particular given link
# In this DRAFT, we will use a specific path as an example.
# But the idea would be that the USER itself would choose the path he wants
# and then the script will return the availables parameters.
# Idealy, the path chosen by User would be stored in a variable :
# In this DRAFT, we will use the path "variant annotation" as an example.
chosen_path <- '/{version}/{species}/genomic/variant/{variants}/annotation'
# Create a list with the paths and theis content:
paths_JSON <- swagger_JSON$paths
# paths_JSON # this line is for testing
# Create a list with all the content of the choosen path (try 1)
# The following code does not work but why ?
chosen_path <-  paths_JSON$chosen_path
# chosen_path # this line is for testing
# Create a list with all the content of the choosen path (try 2)
# This code works but it is limited because the path is pre-chosen
var_annot_path <- paths_JSON$`/{version}/{species}/genomic/variant/{variants}/annotation`
# map(var_annot_path, names) # this line is for testing
parameters_list <- var_annot_path$get$parameters
# parameters_list # this line is for testing
param_list_length <- length(parameters_list)
param_name_vector <- character()
param_descr_vector <- character()
for (i in 1:param_list_length){
one_param <- parameters_list[[i]]
param_name <- one_param$name
param_description <- one_param$description
param_name_vector <- c(param_name_vector, param_name)
param_descr_vector <- c(param_descr_vector, param_description)
}
param_name_vector
param_descr_vector
param_mtrx <- cbind(param_name_vector, param_descr_vector)
param_mtrx
i
parameters_list[[i]]
parameters_list[i]
class(parameters_list)
test <- data.frame(parameters_list)
View(test)
param_mtrx <- subset(parameters_list, select=c("name", "description"))
parameters_list <- var_annot_path$get$parameters
param_list_length <- length(parameters_list)
param_name_vector <- parameters_list$name
param_mtrx <- parameters_list[,c("name", "description")]
swagger_URL <- getURL("http://bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/swagger.json")
swagger_JSON <-fromJSON(swagger_URL)
############# [INFO] [NOT STARTED] Ask the user to choose a particular GET (path) ###############
# This part will be done in Spotify (TIBCO)
# The path chosen by User would be stored in a variable :
# In this DRAFT, we will use the path "variant annotation" as an example.
chosen_path <- '/{version}/{species}/genomic/variant/{variants}/annotation'
############# [CODE] [IN PROGRESS] Get the filter parameters from a particular path ###############
# The idea would be to reach the "parameters" level
# to retrieve all the paramater for a particular given link
# In this DRAFT, we will use a specific path as an example.
# But the idea would be that the USER itself would choose the path he wants
# and then the script will return the availables parameters.
# Create a list with the paths and their content:
paths_JSON <- swagger_JSON$paths
# paths_JSON # this line is for testing
# Create a list with all the content of the chosen path
var_annot_path <- paths_JSON[[paste(chosen_path)]]
# map(var_annot_path, names) # this line is for testing
parameters_list <- var_annot_path$get$parameters
# parameters_list # this line is for testing
param_list_length <- length(parameters_list)
param_name_vector <- parameters_list$name
param_name_vector <- parameters_list$name
param_name_vector <- parameters_list$name
param_descr_vector <- parameters_list$des
########### Load RinR library #############
library(RinR)
########### Determinate R interpreter location ########
Rversion <- makeREvaluator("R", RHome = "C:/Program Files/R/R-3.4.1")
param_mtrx <- REvaluate({
############# [CODE] Load libraries ###################
library(RCurl)
library(jsonlite)
# For map function
library(purrr)
library(tidyverse)
library(rjson)
############# [CODE] Get the main Swagger.json from CELLBASE ###############
swagger_URL <- getURL("http://bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/swagger.json")
swagger_JSON <-fromJSON(swagger_URL)
############# [INFO] [NOT STARTED] Ask the user to choose a particular GET (path) ###############
# This part will be done in Spotify (TIBCO)
# The path chosen by User would be stored in a variable :
# In this DRAFT, we will use the path "variant annotation" as an example.
chosen_path <- '/{version}/{species}/genomic/variant/{variants}/annotation'
############# [CODE] [IN PROGRESS] Get the filter parameters from a particular path ###############
# The idea would be to reach the "parameters" level
# to retrieve all the paramater for a particular given link
# In this DRAFT, we will use a specific path as an example.
# But the idea would be that the USER itself would choose the path he wants
# and then the script will return the availables parameters.
# Create a list with the paths and their content:
paths_JSON <- swagger_JSON$paths
# paths_JSON # this line is for testing
# Create a list with all the content of the chosen path
var_annot_path <- paths_JSON[[paste(chosen_path)]]
# map(var_annot_path, names) # this line is for testing
parameters_list <- var_annot_path$get$parameters
# parameters_list # this line is for testing
param_list_length <- length(parameters_list)
param_name_vector <- character()
param_descr_vector <- character()
for (i in 1:param_list_length){
one_param <- parameters_list[[i]]
param_name <- one_param$name
param_description <- one_param$description
param_name_vector <- c(param_name_vector, param_name)
param_descr_vector <- c(param_descr_vector, param_description)
}
param_mtrx <- cbind(param_name_vector, param_descr_vector)
param_mtrx
############# [CODE] Load libraries ###################
library(RCurl)
library(jsonlite)
# For map function
library(purrr)
library(tidyverse)
library(rjson)
############# [CODE] Get the main Swagger.json from CELLBASE ###############
swagger_URL <- getURL("http://bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/swagger.json")
swagger_JSON <-fromJSON(swagger_URL)
############# [INFO] [NOT STARTED] Ask the user to choose a particular GET (path) ###############
# This part will be done in Spotify (TIBCO)
# The path chosen by User would be stored in a variable :
# In this DRAFT, we will use the path "variant annotation" as an example.
chosen_path <- '/{version}/{species}/genomic/variant/{variants}/annotation'
############# [CODE] [IN PROGRESS] Get the filter parameters from a particular path ###############
# The idea would be to reach the "parameters" level
# to retrieve all the paramater for a particular given link
# In this DRAFT, we will use a specific path as an example.
# But the idea would be that the USER itself would choose the path he wants
# and then the script will return the availables parameters.
# Create a list with the paths and their content:
paths_JSON <- swagger_JSON$paths
# paths_JSON # this line is for testing
# Create a list with all the content of the chosen path
var_annot_path <- paths_JSON[[paste(chosen_path)]]
# map(var_annot_path, names) # this line is for testing
parameters_list <- var_annot_path$get$parameters
# parameters_list # this line is for testing
param_list_length <- length(parameters_list)
param_name_vector <- character()
param_descr_vector <- character()
for (i in 1:param_list_length){
one_param <- parameters_list[[i]]
param_name <- one_param$name
param_description <- one_param$description
param_name_vector <- c(param_name_vector, param_name)
param_descr_vector <- c(param_descr_vector, param_description)
}
param_mtrx <- cbind(param_name_vector, param_descr_vector)
param_mtrx
library(RCurl)
library(RCurl)
library(jsonlite)
# For map function
library(purrr)
library(tidyverse)
library(rjson)
############# [CODE] Get the main Swagger.json from CELLBASE ###############
swagger_URL <- getURL("http://bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/swagger.json")
swagger_JSON <-fromJSON(swagger_URL)
############# [INFO] [NOT STARTED] Ask the user to choose a particular GET (path) ###############
# This part will be done in Spotify (TIBCO)
# The path chosen by User would be stored in a variable :
# In this DRAFT, we will use the path "variant annotation" as an example.
chosen_path <- '/{version}/{species}/genomic/variant/{variants}/annotation'
############# [CODE] [IN PROGRESS] Get the filter parameters from a particular path ###############
# The idea would be to reach the "parameters" level
# to retrieve all the paramater for a particular given link
# In this DRAFT, we will use a specific path as an example.
# But the idea would be that the USER itself would choose the path he wants
# and then the script will return the availables parameters.
# Create a list with the paths and their content:
paths_JSON <- swagger_JSON$paths
# paths_JSON # this line is for testing
# Create a list with all the content of the chosen path
var_annot_path <- paths_JSON[[paste(chosen_path)]]
# map(var_annot_path, names) # this line is for testing
parameters_list <- var_annot_path$get$parameters
# parameters_list # this line is for testing
param_list_length <- length(parameters_list)
param_name_vector <- character()
param_descr_vector <- character()
for (i in 1:param_list_length){
one_param <- parameters_list[[i]]
param_name <- one_param$name
param_description <- one_param$description
param_name_vector <- c(param_name_vector, param_name)
param_descr_vector <- c(param_descr_vector, param_description)
}
param_mtrx <- cbind(param_name_vector, param_descr_vector)
}
]
9
library(RCurl)
library(jsonlite)
library(purrr)
library(tidyverse)
library(rjson)
swagger_URL <- getURL("http://bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/swagger.json")
swagger_JSON <-fromJSON(swagger_URL)
chosen_path <- '/{version}/{species}/genomic/variant/{variants}/annotation'
paths_JSON <- swagger_JSON$paths
var_annot_path <- paths_JSON[[paste(chosen_path)]]
parameters_list <- var_annot_path$get$parameters
param_list_length <- length(parameters_list)
param_name_vector <- character()
param_descr_vector <- character()
for (i in 1:param_list_length){
one_param <- parameters_list[[i]]
param_name <- one_param$name
param_description <- one_param$description
param_name_vector <- c(param_name_vector, param_name)
param_descr_vector <- c(param_descr_vector, param_description)
}
param_mtrx <- cbind(param_name_vector, param_descr_vector)
param_mtrx
library(GenomicAlignments)
library(VariantAnnotation)
setwd("C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk")
############# [CODE] Load libraries ###################
library(RCurl)
library(jsonlite)
library(cellbaseR)
############# [Ony for GET VARIANT QUERIES] Get the variants table ############
variant_table <- read.table("test_files\\variants_table.txt", header=TRUE)
############# [cellbaseR] Build the GET URL and query CellBase ############
query_vector <-character()
URL_vector <- character()
results_list <- list()
cb <- CellBaseR()
var_number <- nrow(variant_table)
for (i in 1:var_number) {
var_chrom <- variant_table[i,1]
var_range <- variant_table[i,2]
var_refAl <- variant_table[i,3]
var_altAl <- variant_table[i,4]
# Get variant cellbase info with cellbaseR package
variant <- paste(var_chrom, ":", var_range, ":", var_refAl, ":", var_altAl, sep = "")
res2 <- getVariant(object=cb, ids=variant, resource="annotation")
res2table <- res2[c("chromosome", "start", "reference", "alternate", "id", "displayConsequenceType")]
if (i==1) {
getVariant_table <- res2table
# testing lines
completeTable1 <- res2
} else if (i==2) {
completeTable2 <- res2
getVariant_table <- (rbind(as.matrix(getVariant_table), as.matrix(res2table)))
} else if (i==3) {
completeTable3 <- res2
getVariant_table <- (rbind(as.matrix(getVariant_table), as.matrix(res2table)))
} else if (i==4) {
completeTable4 <- res2
getVariant_table <- (rbind(as.matrix(getVariant_table), as.matrix(res2table)))
} else {
getVariant_table <- (rbind(as.matrix(getVariant_table), as.matrix(res2table)))
# testing line
completeTable5 <- res2
}
print (paste("Processing variant number:", i)) # this line is for testing
}
View(completeTable5)
my_vcf <- "C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\R_2015_01_27_14_48_49_user_XEN-66-Haloplex_316_Nefro_pool24_124_2305.vcf"
setwd("C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk")
my_vcf <- "C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\R_2015_01_27_14_48_49_user_XEN-66-Haloplex_316_Nefro_pool24_124_2305.vcf"
vcf_extracted <- readVcf(my_vcf, "hg19")
head(vcf_extracted)
header(vcf_extracted)
class(header(vcf_extracted))
vcf_header <- vcf_extracted
vcf_header
vcf_header <- header(vcf_extracted)
vcf_header
vcf_header$samples
vcf_header@samples
samples_num <- (header(vcf_extracted))@samples
rowRanges(vcf_extracted)
vcfGRanges <- head(rowRanges(vcf_extracted), GRsize)
GRsize <- 5 # number of variant to be extracted
vcfGRanges <- head(rowRanges(vcf_extracted), GRsize)
vcf_rowranges <- rowRanges(vcf_extracted)
vcf_rowranges
my_sample <- runif(40, min=0, max=samples_num)
my_sample <- runif(40, min=0, max=paste(samples_num))
my_sample <- runif(40, min=0, max=(paste(samples_num)))
class(samples_num)
test <- as.numeric(samples_num)
samples_num <- as.numeric((header(vcf_extracted))@samples)
my_sample <- runif(40, min=0, max=samples_num)
vcfGRanges_complete <- head(rowRanges(vcf_extracted))
vcfGRanges_complete
vcfGRanges_complete <- rowRanges(vcf_extracted)
vcfGRanges_complete
