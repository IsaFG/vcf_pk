sink()
# Filter from the result list the output of those queries that produced no result
# filtrar de la lista de resultados los outputs de aquellas queries que no devuelven resultado
queries_with_results<- rowSums(query_stats[,c(2,3)])>0
queries_with_results
retrieved_results<-query_result$result[queries_with_results]
retrieved_results  # CUIDADO esto cuelga R con datos masivos
sink("retrieved_results.txt")
retrieved_results
sink()
class(retrieved_results)
results_DF <- do.call(rbind.data.frame, retrieved_results)
sink("results_DF")
results_DF
sink()
class(results_DF)
# test<-data.frame(retrieved_results[[1]]$id,retrieved_results[[1]]$name,retrieved_results[[1]]$description,retrieved_results[[1]]$drugInteractions)
test<-data.frame(retrieved_results[[1]]$id,retrieved_results[[1]]$name,retrieved_results[[1]]$description)
test
sink("tessst.txt")
test
sink()
asFrame <- do.call("rbind.fill", lapply(querydf, as.data.frame))
asDataFrame <- fromJSON(query) %>% as.data.frame
install.packages("magrittr")
install.packages("data.tree")
library(RinR)
install.packages("RinR")
R.Version()
library(cellbaseR)
try(cb <- CellBaseR())
variant <- "1:169549811:A:G"
try(res2 <- getVariant(object=cb, ids=variant, resource="annotation"))
res2 <- cbData(res2)
str(res2, 1)
testRinRresult <- res2
query<-getURL("bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/latest/hsapiens/feature/gene/BRCA2,BRCA1,KRAS/info")
library(RCurl)
library(jsonlite)
query<-getURL("bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/latest/hsapiens/feature/gene/BRCA2,BRCA1,KRAS/info")
query<-getURL("bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/latest/hsapiens/feature/gene/BRCA2,BRCA1,KRAS/info")
query # podemos mostrar el JSON en pantalla
querydf<-fromJSON(query)
query_warnings<-querydf$warning
query_errors<-querydf$error
query_result<-querydf$response
query_stats<-data.frame(query_result[c("id","numTotalResults","numResults")])
names(query_stats)[1]<-"query"
query_stats
queries_with_results<- rowSums(query_stats[,c(2,3)])>0
queries_with_results
retrieved_results<-query_result$result[queries_with_results]
test<-data.frame(retrieved_results[[1]]$id,retrieved_results[[1]]$name,retrieved_results[[1]]$description,retrieved_results[[1]]$drugInteractions)
test
View(test)
View(test)
setwd("C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk")
library(RCurl)
library(jsonlite)
library(cellbaseR)
############# [Ony for GET VARIANT QUERIES] Get the variants table ############
variant_table <- read.table("test_files\\variants_table.txt", header=TRUE)
############# [cellbaseR] Build the GET URL and query CellBase ############
query_vector <-character()
URL_vector <- character()
results_list <- list()
cb <- CellBaseR()
var_number <- nrow(variant_table)
for (i in 1:var_number) {
var_chrom <- variant_table[i,1]
var_range <- variant_table[i,2]
var_refAl <- variant_table[i,3]
var_altAl <- variant_table[i,4]
# Get variant cellbase info with cellbaseR package
variant <- paste(var_chrom, ":", var_range, ":", var_refAl, ":", var_altAl, sep = "")
res2 <- getVariant(object=cb, ids=variant, resource="annotation")
res2table <- res2[c("chromosome", "start", "reference", "alternate", "id", "displayConsequenceType")]
if (i==1) {
getVariant_table <- res2table
# testing lines
completeTable1 <- res2
} else if (i==2) {
completeTable2 <- res2
} else if (i==3) {
completeTable3 <- res2
} else if (i==4) {
completeTable4 <- res2
} else {
getVariant_table <- (rbind(as.matrix(getVariant_table), as.matrix(res2table)))
# testing line
completeTable5 <- res2
}
print (paste("Processing variant number:", i)) # this line is for testing
}
c1 <- colnames(completeTable1)
c5 <- colnames(completeTable5)
if (i==1) {
getVariant_table <- res2table
# testing lines
completeTable1 <- res2
} else if (i==2) {
completeTable2 <- res2
} else if (i==3) {
completeTable3 <- res2
} else if (i==4) {
completeTable4 <- res2
} else {
getVariant_table <- (rbind(as.matrix(getVariant_table), as.matrix(res2table)))
# testing line
completeTable5 <- res2
}
completeTable1$geneDrugInteraction
setdiff(colnames(completeTable1), colnames(completeTable5))
c1
c5
setdiff(c1, c5)
setdiff(c5, c1)
library(RCurl)
library(jsonlite)
chosen_path <- '/{version}/{species}/genomic/variant/{variants}/annotation'
paths_JSON <- swagger_JSON$paths
swagger_URL <- getURL("http://bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/swagger.json")
swagger_JSON <-fromJSON(swagger_URL)
paths_JSON <- swagger_JSON$paths
paths_JSON # this line is for testing
swagger_URL <- getURL("http://bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/swagger.json")
swagger_JSON <-fromJSON(swagger_URL)
chosen_path <- '/{version}/{species}/genomic/variant/{variants}/annotation'
category_URL <- "genomic/variant/"
subcategory_URL <- "/annotation"
parameters_table <- read.table("test_files\\param_mtrx.txt", header=TRUE)
param_number <- nrow(parameters_table)
parameters_URL <- ""
parameters_URL <- "limit=-1&skip=-1&skipCount=false&count=false&Output%20format=json&normalize=false&phased=false&useCache=false&imprecise=true&svExtraPadding=0&cnvExtraPadding=0"
variant_table <- read.table("test_files\\variants_table.txt", header=TRUE)
common_URL <- "http://bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/v4/hsapiens/"
URL_vector <- character()
var_number <- nrow(variant_table)
for (i in 1:var_number) {
var_chrom <- variant_table[i,1]
var_range <- variant_table[i,2]
var_refAl <- variant_table[i,3]
var_altAl <- variant_table[i,4]
# Get the Swagger link
variant_URL <- paste(var_chrom,"%3A",var_range,"%3A",var_refAl,"%3A",var_altAl,sep = "")
URL_base <- paste(common_URL,category_URL,variant_URL,subcategory_URL,"?",parameters_URL,sep = "")
URL_vector <- c(URL_vector, URL_base)
# # Testing block
# print (paste("Processing variant number:", i)) # this line is for testing
# print (URL_vector)
}
URL_vector
library(RCurl)
library(jsonlite)
library(cellbaseR)
############# [Ony for GET VARIANT QUERIES] Get the variants table ############
variant_table <- read.table("test_files\\variants_table.txt", header=TRUE)
############# [cellbaseR] Build the GET URL and query CellBase ############
query_vector <-character()
URL_vector <- character()
results_list <- list()
cb <- CellBaseR()
var_number <- nrow(variant_table)
for (i in 1:var_number) {
var_chrom <- variant_table[i,1]
var_range <- variant_table[i,2]
var_refAl <- variant_table[i,3]
var_altAl <- variant_table[i,4]
# Get variant cellbase info with cellbaseR package
variant <- paste(var_chrom, ":", var_range, ":", var_refAl, ":", var_altAl, sep = "")
res2 <- getVariant(object=cb, ids=variant, resource="annotation")
res2table <- res2[c("chromosome", "start", "reference", "alternate", "id", "displayConsequenceType")]
if (i==1) {
getVariant_table <- res2table
# testing lines
completeTable1 <- res2
} else if (i==2) {
completeTable2 <- res2
} else if (i==3) {
completeTable3 <- res2
} else if (i==4) {
completeTable4 <- res2
} else {
getVariant_table <- (rbind(as.matrix(getVariant_table), as.matrix(res2table)))
# testing line
completeTable5 <- res2
}
print (paste("Processing variant number:", i)) # this line is for testing
}
c1 <- colnames(completeTable1)
c5 <- colnames(completeTable5)
completeTable1$geneDrugInteraction
c1
c5
setdiff(c1, c5)
setdiff(c5, c1)
intersect(c1,c5)
class(res2)
class(res2table)
getVariant_table
View(getVariant_table)
for (i in 1:var_number) {
var_chrom <- variant_table[i,1]
var_range <- variant_table[i,2]
var_refAl <- variant_table[i,3]
var_altAl <- variant_table[i,4]
# Get variant cellbase info with cellbaseR package
variant <- paste(var_chrom, ":", var_range, ":", var_refAl, ":", var_altAl, sep = "")
res2 <- getVariant(object=cb, ids=variant, resource="annotation")
res2table <- res2[c("chromosome", "start", "reference", "alternate", "id", "displayConsequenceType")]
if (i==1) {
getVariant_table <- res2table
# testing lines
completeTable1 <- res2
getVariant_table <- (rbind(as.matrix(getVariant_table), as.matrix(res2table)))
} else if (i==2) {
completeTable2 <- res2
getVariant_table <- (rbind(as.matrix(getVariant_table), as.matrix(res2table)))
} else if (i==3) {
completeTable3 <- res2
getVariant_table <- (rbind(as.matrix(getVariant_table), as.matrix(res2table)))
} else if (i==4) {
completeTable4 <- res2
getVariant_table <- (rbind(as.matrix(getVariant_table), as.matrix(res2table)))
} else {
getVariant_table <- (rbind(as.matrix(getVariant_table), as.matrix(res2table)))
# testing line
completeTable5 <- res2
}
print (paste("Processing variant number:", i)) # this line is for testing
}
View(getVariant_table)
variant_table <- read.table("test_files\\variants_table.txt", header=TRUE)
############# [cellbaseR] Build the GET URL and query CellBase ############
query_vector <-character()
URL_vector <- character()
results_list <- list()
cb <- CellBaseR()
var_number <- nrow(variant_table)
for (i in 1:var_number) {
var_chrom <- variant_table[i,1]
var_range <- variant_table[i,2]
var_refAl <- variant_table[i,3]
var_altAl <- variant_table[i,4]
# Get variant cellbase info with cellbaseR package
variant <- paste(var_chrom, ":", var_range, ":", var_refAl, ":", var_altAl, sep = "")
res2 <- getVariant(object=cb, ids=variant, resource="annotation")
res2table <- res2[c("chromosome", "start", "reference", "alternate", "id", "displayConsequenceType")]
if (i==1) {
getVariant_table <- res2table
# testing lines
completeTable1 <- res2
getVariant_table <- (rbind(as.matrix(getVariant_table), as.matrix(res2table)))
} else if (i==2) {
completeTable2 <- res2
getVariant_table <- (rbind(as.matrix(getVariant_table), as.matrix(res2table)))
} else if (i==3) {
completeTable3 <- res2
getVariant_table <- (rbind(as.matrix(getVariant_table), as.matrix(res2table)))
} else if (i==4) {
completeTable4 <- res2
getVariant_table <- (rbind(as.matrix(getVariant_table), as.matrix(res2table)))
} else {
getVariant_table <- (rbind(as.matrix(getVariant_table), as.matrix(res2table)))
# testing line
completeTable5 <- res2
}
print (paste("Processing variant number:", i)) # this line is for testing
}
########### Print the results by console ############
########### Testing block ############
# Podemos comprobar que obtenemos tablas con numeros diferentes
c1 <- colnames(completeTable1)
c5 <- colnames(completeTable5)
completeTable1$geneDrugInteraction
c1
c5
# La linea siguiente muestra que campos son diferentes entre ambas tablas
setdiff(c5, c1)
# La linea siguiente muestra los campos comunes entre ambas tablas
intersect(c1,c5)
class(res2)
class(res2table)
getVariant_table
View(getVariant_table)
for (i in 1:var_number) {
var_chrom <- variant_table[i,1]
var_range <- variant_table[i,2]
var_refAl <- variant_table[i,3]
var_altAl <- variant_table[i,4]
# Get variant cellbase info with cellbaseR package
variant <- paste(var_chrom, ":", var_range, ":", var_refAl, ":", var_altAl, sep = "")
res2 <- getVariant(object=cb, ids=variant, resource="annotation")
res2table <- res2[c("chromosome", "start", "reference", "alternate", "id", "displayConsequenceType")]
if (i==1) {
getVariant_table <- res2table
# testing lines
completeTable1 <- res2
} else if (i==2) {
completeTable2 <- res2
getVariant_table <- (rbind(as.matrix(getVariant_table), as.matrix(res2table)))
} else if (i==3) {
completeTable3 <- res2
getVariant_table <- (rbind(as.matrix(getVariant_table), as.matrix(res2table)))
} else if (i==4) {
completeTable4 <- res2
getVariant_table <- (rbind(as.matrix(getVariant_table), as.matrix(res2table)))
} else {
getVariant_table <- (rbind(as.matrix(getVariant_table), as.matrix(res2table)))
# testing line
completeTable5 <- res2
}
print (paste("Processing variant number:", i)) # this line is for testing
}
View(getVariant_table)
completeTable1$geneDrugInteraction
View(completeTable1)
completeTable1$hgvs
class(completeTable1$hgvs)
completeTable1$hgvs[[1]]
class(completeTable1$hgvs[[1]])
completeTable1$consequenceTypes
completeTable1$consequenceTypes[[1]]
class(completeTable1$consequenceTypes[[1]])
class(completeTable1$consequenceTypes)
swagger_URL <- getURL("http://bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/swagger.json")
swagger_JSON <-fromJSON(swagger_URL)
############# [INFO] [NOT STARTED] Ask the user to choose a particular GET (path) ###############
# This part will probably be done in Spotify (TIBCO)
############# [CODE] [IN PROGRESS] Get the filter parameters from a particular path ###############
# The idea would be to reach the "parameters" level
# to retrieve all the paramater for a particular given link
# In this DRAFT, we will use a specific path as an example.
# But the idea would be that the USER itself would choose the path he wants
# and then the script will return the availables parameters.
# Idealy, the path chosen by User would be stored in a variable :
# In this DRAFT, we will use the path "variant annotation" as an example.
chosen_path <- '/{version}/{species}/genomic/variant/{variants}/annotation'
# Create a list with the paths and theis content:
paths_JSON <- swagger_JSON$paths
# paths_JSON # this line is for testing
# Create a list with all the content of the choosen path (try 1)
# The following code does not work but why ?
chosen_path <-  paths_JSON$chosen_path
chosen_path
chosen_path <- '/{version}/{species}/genomic/variant/{variants}/annotation'
chosen_path
test <-  paths_JSON$paste(chosen_path)
variant_table <- read.table("test_files\\variants_table.txt", header=TRUE)
############# [cellbaseR] Build the GET URL and query CellBase ############
query_vector <-character()
URL_vector <- character()
results_list <- list()
cb <- CellBaseR()
var_number <- nrow(variant_table)
for (i in 1:var_number) {
var_chrom <- variant_table[i,1]
var_range <- variant_table[i,2]
var_refAl <- variant_table[i,3]
var_altAl <- variant_table[i,4]
# Get variant cellbase info with cellbaseR package
variant <- paste(var_chrom, ":", var_range, ":", var_refAl, ":", var_altAl, sep = "")
res2 <- getVariant(object=cb, ids=variant, resource="annotation")
res2table <- res2[c("chromosome", "start", "reference", "alternate", "id", "displayConsequenceType")]
if (i==1) {
getVariant_table <- res2table
# testing lines
completeTable1 <- res2
} else if (i==2) {
completeTable2 <- res2
getVariant_table <- (rbind(as.matrix(getVariant_table), as.matrix(res2table)))
} else if (i==3) {
completeTable3 <- res2
getVariant_table <- (rbind(as.matrix(getVariant_table), as.matrix(res2table)))
} else if (i==4) {
completeTable4 <- res2
getVariant_table <- (rbind(as.matrix(getVariant_table), as.matrix(res2table)))
} else {
getVariant_table <- (rbind(as.matrix(getVariant_table), as.matrix(res2table)))
# testing line
completeTable5 <- res2
}
print (paste("Processing variant number:", i)) # this line is for testing
}
########### Print the results by console ############
########### Testing block ############
View(completeTable1)
View(completeTable2)
c1 <- colnames(completeTable1)
c5 <- colnames(completeTable5)
setdiff(c5, c1)
swagger_URL <- getURL("http://bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/swagger.json")
swagger_JSON <-fromJSON(swagger_URL)
paths_JSON <- swagger_JSON$paths
chosen_path <-  paths_JSON[paste(chosen_path)]
chosen_path <- '/{version}/{species}/genomic/variant/{variants}/annotation'
chosen_path <-  paths_JSON[paste(chosen_path)]
chosen_path <-  paths_JSON[[paste(chosen_path)]]
chosen_path <-  paths_JSON[paste(chosen_path)]
chosen_path <- '/{version}/{species}/genomic/variant/{variants}/annotation'
test <-  paths_JSON[paste(chosen_path)]
test <-  paths_JSON[[paste(chosen_path)]]
swagger_URL <- getURL("http://bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/swagger.json")
swagger_JSON <-fromJSON(swagger_URL)
chosen_path <- '/{version}/{species}/genomic/variant/{variants}/annotation'
paths_JSON <- swagger_JSON$paths
var_annot_path <- paths_JSON[[paste(chosen_path)]]
parameters_list <- var_annot_path$get$parameters
param_list_length <- length(parameters_list)
param_name_vector <- character()
param_descr_vector <- character()
for (i in 1:param_list_length){
one_param <- parameters_list[[i]]
param_name <- one_param$name
param_description <- one_param$description
param_name_vector <- c(param_name_vector, param_name)
param_descr_vector <- c(param_descr_vector, param_description)
}
############# [CODE] Get the main Swagger.json from CELLBASE ###############
swagger_URL <- getURL("http://bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/swagger.json")
swagger_JSON <-fromJSON(swagger_URL)
############# [INFO] [NOT STARTED] Ask the user to choose a particular GET (path) ###############
# This part will be done in Spotify (TIBCO)
# The path chosen by User would be stored in a variable :
# In this DRAFT, we will use the path "variant annotation" as an example.
chosen_path <- '/{version}/{species}/genomic/variant/{variants}/annotation'
############# [CODE] [IN PROGRESS] Get the filter parameters from a particular path ###############
# The idea would be to reach the "parameters" level
# to retrieve all the paramater for a particular given link
# In this DRAFT, we will use a specific path as an example.
# But the idea would be that the USER itself would choose the path he wants
# and then the script will return the availables parameters.
# Create a list with the paths and their content:
paths_JSON <- swagger_JSON$paths
# paths_JSON # this line is for testing
# Create a list with all the content of the chosen path
var_annot_path <- paths_JSON[[paste(chosen_path)]]
# map(var_annot_path, names) # this line is for testing
parameters_list <- var_annot_path$get$parameters
# parameters_list # this line is for testing
param_list_length <- length(parameters_list)
param_name_vector <- character()
param_descr_vector <- character()
for (i in 1:param_list_length){
one_param <- parameters_list[[i]]
param_name <- one_param$name
param_description <- one_param$description
param_name_vector <- c(param_name_vector, param_name)
param_descr_vector <- c(param_descr_vector, param_description)
}
one_param <- parameters_list[[1]]
param_name <- one_param$name
class(var_annot_path)
var_annot_path <- paths_JSON[paste(chosen_path)]
class(var_annot_path)
var_annot_path_sub <- paths_JSON[[paste(chosen_path)]]
var_annot_path <- paths_JSON[[paste(chosen_path)]]
var_annot_path_path <- paths_JSON[paste(chosen_path)]
parameters_list <- var_annot_path$get$parameters
View(parameters_list)
one_param
parameters_list$name
swagger_URL <- getURL("http://bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/swagger.json")
swagger_JSON <-fromJSON(swagger_URL)
############# [INFO] [NOT STARTED] Ask the user to choose a particular GET (path) ###############
# This part will be done in Spotify (TIBCO)
# The path chosen by User would be stored in a variable :
# In this DRAFT, we will use the path "variant annotation" as an example.
chosen_path <- '/{version}/{species}/genomic/variant/{variants}/annotation'
############# [CODE] [IN PROGRESS] Get the filter parameters from a particular path ###############
# The idea would be to reach the "parameters" level
# to retrieve all the paramater for a particular given link
# In this DRAFT, we will use a specific path as an example.
# But the idea would be that the USER itself would choose the path he wants
# and then the script will return the availables parameters.
# Create a list with the paths and their content:
paths_JSON <- swagger_JSON$paths
# paths_JSON # this line is for testing
# Create a list with all the content of the chosen path
var_annot_path <- paths_JSON[[paste(chosen_path)]]
# map(var_annot_path, names) # this line is for testing
parameters_list <- var_annot_path$get$parameters
# parameters_list # this line is for testing
param_list_length <- length(parameters_list)
param_name_vector <- parameters_list$name
param_descr_vector <- parameters_list$description
param_mtrx <- cbind(param_name_vector, param_descr_vector)
param_mtrx
View(param_mtrx)
param_name_vector
param_descr_vector
View(param_mtrx)
param_mtrx <- data.frame(param_mtrx)
View(param_mtrx)
param_mtrx
var_annot_path_2 <- paths_JSON$`/{version}/{species}/genomic/variant/{variants}/annotation`
parameters_list <- var_annot_path_2$get$parameters
parameters_list <- var_annot_path$get$parameters
parameters_list_2 <- var_annot_path_2$get$parameters
View(parameters_list_2)
param_mtrx <- parameters_list[1][3]
parameters_list[1][3]
parameters_list[1]
parameters_list[,c("name", "description")]
test <- parameters_list[,c("name", "description")]
View(test)
subest(parameters_list, select=c("name", "description"))
subset(parameters_list, select=c("name", "description"))
test <- subset(parameters_list, select=c("name", "description"))
param_mtrx <- cbind(param_name_vector, param_descr_vector)
param_mtrx <- data.frame(param_mtrx)
param_mtrx
