########### [RStudio] Print the ouput in a txt file ###########
sink("C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\test_files\\indexedVCFfiles\\locIndexedVCF")
str(locIndexedVCF)
sink()
locIndexedVCF
locIndexedVCF$path
############# [Code] Annotate the VCF file with cellbase ############
path_to_indexed_files <- locIndexedVCF$path # TEST LINE
cb <- CellBaseR()
fl <- path_to_indexed_files
annotVCF_table <- AnnotateVcf(object=cb, file=fl, BPPARAM = bpparam(workers=2))
########### [Code] Main method ########
indexAndAnnotVCF <- function(path_to_vcf, path_to_indexed_files) {
library(Rsamtools)
library(cellbaseR)
from <- path_to_vcf
to <- tempfile(pattern = "indexedVCF", tmpdir = path_to_indexed_files, fileext = "")
zipped <- bgzip(from, to)
idx <- indexTabix(file = zipped, format = "vcf", comment = "#")
tab <- TabixFile(zipped, idx)
return (tab)
}
########### [Code] Determinate if running in TERR or standard R version #############
isTERR<-R.Version()
Rversion<-NULL
if (!is.null(isTERR[["TERR.version"]])) {
########### [TIBCO] Load RinR library ###################
library(RinR)
########### [TIBCO] Determinate R interpreter location ########
Rversion <- makeREvaluator("R", RHome = "C:/Program Files/R/R-3.4.1")
########### [TIBCO] Get the input variables ############
path_to_vcf <- "C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\R_2015_01_27_14_48_49_user_XEN-66-Haloplex_316_Nefro_pool24_124_2305.vcf"
path_to_indexed_files <-"C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\test_files\\indexedVCFfiles"
########### [TIBCO] Create the REvaluate object to execute main method ########
locIndexedVCF <- REvaluate({
loc_indexed_VCF <- indexAndAnnotVCF(path_to_vcf, path_to_indexed_files)
}
, data = list(indexAndAnnotVCF = indexAndAnnotVCF, path_to_vcf = path_to_vcf, path_to_indexed_files = path_to_indexed_files)
# , REvaluator = Rversion
# , verbose	= TRUE
)
########### [TIBCO] Convert the instance file to a Blob Object ########
locIndexedVCFBlob <- SObjectToBlob(locIndexedVCF)
} else {
########### [RStudio] Set Working directory ############
setwd("C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk")
########### [RStudio] Get the input variables ############
path_to_vcf <- "C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\R_2015_01_27_14_48_49_user_XEN-66-Haloplex_316_Nefro_pool24_124_2305.vcf"
path_to_indexed_files <-"C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\test_files\\indexedVCFfiles"
########### [RStudio] Execute main method ###########
locIndexedVCF <- indexAndAnnotVCF(path_to_vcf, path_to_indexed_files)
########### [RStudio] Print the ouput in a txt file ###########
sink("C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\test_files\\indexedVCFfiles\\locIndexedVCF")
str(locIndexedVCF)
sink()
}
########### [Code] Main method ########
annotIndexedVCF<- function(path_to_indexed_files) {
############# [Code] Load libraries #############
library(RCurl)
library(jsonlite)
library(cellbaseR)
library(dplyr)
library(tidyr)
############# [Code] Annotate the VCF file with cellbase ############
path_to_indexed_files <- locIndexedVCF$path # TEST LINE
cb <- CellBaseR()
fl <- path_to_indexed_files
annotVCF_table <- AnnotateVcf(object=cb, file=fl, BPPARAM = bpparam(workers=2))
# Change the name of the "id" column to avoid repetition
colnames(annotVCF_table)[5] <- "rsID"
return(annotVCF_table)
}
########### [Code] Determinate if running in TERR or standard R version #############
isTERR<-R.Version()
Rversion<-NULL
if (!is.null(isTERR[["TERR.version"]])) {
########### [TIBCO] Load RinR library ###################
library(RinR)
########### [TIBCO] Determinate R interpreter location ########
Rversion <- makeREvaluator("R", RHome = "C:/Program Files/R/R-3.4.1")
path_to_indexed_files <- locIndexedVCF$path
########### [TIBCO] Create the REvaluate object to execute main method ########
annotVCFTable <- REvaluate({
annotVCF_table <- annotIndexedVCF(path_to_indexed_files)
annotVCF_table
}
, data = list(annotIndexedVCF = annotIndexedVCF, path_to_indexed_files = path_to_indexed_files)
# , REvaluator = Rversion
# , verbose	= TRUE
)
########### [TIBCO] Convert the table to a Blob Object ########
annotVCFTableBlob <- SObjectToBlob(annotVCFTable)
} else {
########### [RStudio] Set Working directory ############
setwd("C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk")
########### [RStudio] Execute main method ###########
# Note: the variable locIndexedVCF is the instance file of the indexed files
# and comes from a previous script
annotVCFTable <- annotIndexedVCF(locIndexedVCF$path)
########### [RStudio] Print the basic table and available annotations in a txt file ###########
# Works only with basic table
try(write.table(annotVCFTable[,1:5],"test_files\\annotated_indVCF.txt", append = FALSE, sep="\t",row.names=FALSE))
try(write.table(colnames(annotVCFTable[6:length(annotVCFTable)]),"test_files\\available_annotations_indVCF.txt", append = FALSE, sep="\t",row.names=FALSE))
}
View(annotVCFTable)
View(annotVCFTable)
colnames(annotVCFTable)
table_cols <- colnames(annotVCFTable)
lapply(annotVCFTable, class)
col_list <- lapply(annotVCFTable, class)
col_list
col_list[1]
for (i in col_list) {
print(class)
}
for (i in col_list) {
print(class(i))
}
class(col_list[1])
for (i in col_list) {
print(i)
}
for (i in col_list) {
print(name(i))
print(i)
}
for (i in col_list) {
print(names(i))
print(i)
}
for (i in col_list) {
print(i)
}
col_class <- lapply(annotVCFTable, class)
col_names <- colnames(annotVCFTable)
col_names
col_class
for (i in col_list) {
print(i)
print(col_names(i))
}
for (i in col_list) {
print(i)
print(col_names[i])
}
col_list[1]
col_list[2]
for (i in col_names) {
print(col_names[i])
print(i)
}
names(col_class)[1] # "width"
for (i in col_class) {
print(i)
names(i)
}
for (i in col_class) {
print(names(i))
print(i)
}
col_names
col_class
for (i in len(col_class)) {
names(col_class)[i]
col_class[i]
}
for (i in lenght(col_class)) {
names(col_class)[i]
col_class[i]
}
for (i in length(col_class)) {
names(col_class)[i]
col_class[i]
}
for (i in length(col_class)) {
print(names(col_class)[i])
print(col_class[i])
}
for (i in 1:length(col_class)) {
print(names(col_class)[i])
print(col_class[i])
}
for (i in 1:length(col_class)) {
element <- names(col_class)[i]
print(col_class$paste(element))
}
col_class[repeat]
col_class[repeat]
col_class(repeat)
col_class[["repeat"]]
col_class["repeat"]
for (i in 1:length(col_class)) {
element <- names(col_class)[i]
print(col_class[[element]])
}
############# [Code] ############
var_number <- nrow(annotVCFTable)
var_number
# control the dimension of each column in the dataframe
for (column in annotVCFTable) {
columns_dim <- c(columns_dim, dim(column))
}
# set the vector of column dimension to 0
# This is important to control calls that return data.frame with dimension problems
columns_dim <- integer()
# control the dimension of each column in the dataframe
for (column in annotVCFTable) {
columns_dim <- c(columns_dim, dim(column))
}
columns_dim
col_dim <- lapply(annotVCFTable, dim)
col_dim
class_vec <- lapply(annotVCFTable, class)
dim_vec <- lapply(annotVCFTable, dim)
for (i in 1:length(col_class)) {
col_name <- names(col_class)[i]
col_class <- class_vec[[col_name]]
col_dim <- dim_vec[[col_name]]
print (paste("Processing column:", col_name, "class: ", col_class, "dimension", col_dim)) # this line is for testing
}
class_vec <- lapply(annotVCFTable, class)
dim_vec <- lapply(annotVCFTable, dim)
# Initialize a table to record any problem about dimensions in the annotated table
problems <- data.frame(variant=integer(0), column=integer(0), dimension=integer(0), class=character(0)) # testing line
for (i in 1:length(col_class)) {
col_name <- names(col_class)[i]
col_class <- class_vec[[col_name]]
col_dim <- dim_vec[[col_name]]
print (paste("Processing column:", col_name, "class: ", col_class, "dimension", col_dim)) # this line is for testing
}
############# [Code] ############
var_number <- nrow(annotVCFTable)
class_vec <- lapply(annotVCFTable, class)
dim_vec <- lapply(annotVCFTable, dim)
# Initialize a table to record any problem about dimensions in the annotated table
problems <- data.frame(variant=integer(0), column=integer(0), dimension=integer(0), class=character(0)) # testing line
for (i in 1:length(class_vec)) {
col_name <- names(class_vec)[i]
col_class <- class_vec[[col_name]]
col_dim <- dim_vec[[col_name]]
print (paste("Processing column:", col_name, "class: ", col_class, "dimension", col_dim)) # this line is for testing
}
is.null(col_dim)
is.null(col_dim) == FALSE
# assign the data.frame to a new variable
annotVariant_sub <- annotVCFTable[[col_name]]
col_name <- "variantTraitAssociation"
# assign the data.frame to a new variable
annotVariant_sub <- annotVCFTable[[col_name]]
View(annotVariant_sub)
# assign the data.frame to a new variable
annotVCFTable_sub <- annotVCFTable[[col_name]]
# assign the data.frame to a new variable
annotVCFTable_incol <- annotVCFTable[[col_name]]
col_name
class_vec
dim_vec
View(annotVariant_sub)
View(annotVCFTable)
colnames(annotVCFTable)
i <- 12
col_name <- names(class_vec)[i]
col_class <- class_vec[[col_name]]
col_dim <- dim_vec[[col_name]]
col_name
i <- 16
col_name <- names(class_vec)[i]
col_class <- class_vec[[col_name]]
col_dim <- dim_vec[[col_name]]
col_name
# Build the table with all the annotation
annotVCFTable_sub <- bind_rows(annotVCFTable[1:i], annotVCFTable[i:length(annotVCFTable)])
# Build the table with all the annotation
annotVCFTable_sub <- bind_rows(annotVCFTable[1:(i-1)], annotVCFTable[(i+1):length(annotVCFTable)])
# Build the table with all the annotation
annotVCFTable_sub <- bind_rows(annotVCFTable[1:(i-1)], annotVCFTable[(i+1):length(annotVCFTable)])
View(annotVCFTable_sub)
View(annotVCFTable_sub)
save.image("~/GitHub/vcf_pk/annotatedVCFTable.RData")
############# [Code] ############
var_number <- nrow(annotVCFTable)
class_vec <- lapply(annotVCFTable, class)
dim_vec <- lapply(annotVCFTable, dim)
# Initialize a table to record any problem about dimensions in the annotated table
problems <- data.frame(variant=integer(0), column=integer(0), dimension=integer(0), class=character(0)) # testing line
col_name <- names(class_vec)[i]
########### [Code] Build a basic table that could be loaded whithout problems ########
# This table has no nested data.frame neither nested list
basicTable <- annotVCFTable[,1:5]
View(basicTable)
########### [Code] Get the available annotations ############
availableAnnots <- colnames(annotVCFTable[6:length(annotvariants_table)])
########### [Code] Get the available annotations ############
availableAnnots <- colnames(annotVCFTable[6:length(annotVCFTable)])
save.image("~/GitHub/vcf_pk/annotatedVCFTable.RData")
############# [Code] ############
var_number <- nrow(annotVCFTable)
class_vec <- lapply(annotVCFTable, class)
dim_vec <- lapply(annotVCFTable, dim)
# Initialize a table to record any problem about dimensions in the annotated table
problems <- data.frame(variant=integer(0), column=integer(0), dimension=integer(0), class=character(0)) # testing line
availableAnnots
if (is.null(col_dim) == FALSE) {  # anormal situation, the column has a dimension > 0
print (paste("WARNING for column", col_name, "MULTIDIMENSIONAL column(s)"))
col_name <- "variantTraitAssociation" # TESTING LINE
i <- 16 # TESTING LINE
# assign the data.frame to a new variable
annotVCFTable_incol <- annotVCFTable[[col_name]]
# Scan the data.frame in order to find the problematic column(s)
print (paste("Analyzing columns of column", col_name)) # testing line
# Build the table with all the annotation
annotVCFTable_sub <- bind_rows(annotVCFTable[1:(i-1)], annotVCFTable[(i+1):length(annotVCFTable)])
post_annotVCFTable <- bind_rows(annotVCFTable, annotVCFTable_incol)
}
col_name <- names(class_vec)[i]
col_class <- class_vec[[col_name]]
col_dim <- dim_vec[[col_name]]
print (paste("Processing column:", col_name, ", class: ", col_class, ", dimension", col_dim)) # this line is for testing
if (is.null(col_dim) == FALSE) {  # anormal situation, the column has a dimension > 0
print (paste("WARNING for column", col_name, "MULTIDIMENSIONAL column(s)"))
col_name <- "variantTraitAssociation" # TESTING LINE
i <- 16 # TESTING LINE
# assign the data.frame to a new variable
annotVCFTable_incol <- annotVCFTable[[col_name]]
# Scan the data.frame in order to find the problematic column(s)
print (paste("Analyzing columns of column", col_name)) # testing line
# Build the table with all the annotation
annotVCFTable_sub <- bind_rows(annotVCFTable[1:(i-1)], annotVCFTable[(i+1):length(annotVCFTable)])
post_annotVCFTable <- bind_rows(annotVCFTable, annotVCFTable_incol)
}
col_dim <- dim_vec[[col_name]]
col_name <- names(class_vec)[i]
i <- 16
col_name <- names(class_vec)[i]
col_name
col_class <- class_vec[[col_name]]
col_dim <- dim_vec[[col_name]]
print (paste("WARNING for column", col_name, "MULTIDIMENSIONAL column(s)"))
col_name <- "variantTraitAssociation" # TESTING LINE
# assign the data.frame to a new variable
annotVCFTable_incol <- annotVCFTable[[col_name]]
annotVCFTable_incol
# Scan the data.frame in order to find the problematic column(s)
print (paste("Analyzing columns of column", col_name)) # testing line
# Build the table with all the annotation
annotVCFTable_sub <- bind_rows(annotVCFTable[1:(i-1)], annotVCFTable[(i+1):length(annotVCFTable)])
View(annotVCFTable_sub)
# assign the data.frame to a new variable
nested_df <- annotVCFTable[[col_name]]
# Build the table with all the annotation
# Subset the original table
front_table <- annotVCFTable[1:(i-1)]
end_table <- annotVCFTable[(i+1):length(annotVCFTable)]
annotVCFTable_sub <- bind_cols(annotVCFTable[1:(i-1)], annotVCFTable[(i+1):length(annotVCFTable)])
View(annotVCFTable_sub)
post_annotVCFTable <- bind_cols(annotVCFTable, nested_df)
# assign the data.frame to a new variable
nested_df <- data.frame(annotVCFTable[[col_name]])
post_annotVCFTable <- bind_cols(annotVCFTable, nested_df)
class(nested_df)
post_annotVCFTable <- bind_cols(annotVCFTable_sub, nested_df)
View(post_annotVCFTable)
########### [Code] Main method ########
annotIndexedVCF<- function(path_to_indexed_files) {
############# [Code] Load libraries #############
library(RCurl)
library(jsonlite)
library(cellbaseR)
library(dplyr)
library(tidyr)
############# [Code] Annotate the VCF file with cellbase ############
path_to_indexed_files <- locIndexedVCF$path # TEST LINE
cb <- CellBaseR()
fl <- path_to_indexed_files
annotVCF_table <- AnnotateVcf(object=cb, file=fl, BPPARAM = bpparam(workers=2))
# Change the name of the "id" column to avoid repetition
colnames(annotVCF_table)[5] <- "rsID"
return(annotVCF_table)
}
########### [Code] Determinate if running in TERR or standard R version #############
isTERR<-R.Version()
Rversion<-NULL
if (!is.null(isTERR[["TERR.version"]])) {
########### [TIBCO] Load RinR library ###################
library(RinR)
########### [TIBCO] Determinate R interpreter location ########
Rversion <- makeREvaluator("R", RHome = "C:/Program Files/R/R-3.4.1")
path_to_indexed_files <- locIndexedVCF$path
########### [TIBCO] Create the REvaluate object to execute main method ########
preAnnotVCFTable <- REvaluate({
annotVCF_table <- annotIndexedVCF(path_to_indexed_files)
annotVCF_table
}
, data = list(annotIndexedVCF = annotIndexedVCF, path_to_indexed_files = path_to_indexed_files)
# , REvaluator = Rversion
# , verbose	= TRUE
)
########### [TIBCO] Convert the table to a Blob Object ########
preAnnotVCFTableBlob <- SObjectToBlob(preAnnotVCFTable)
} else {
########### [RStudio] Set Working directory ############
setwd("C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk")
########### [RStudio] Execute main method ###########
# Note: the variable locIndexedVCF is the instance file of the indexed files
# and comes from a previous script
preAnnotVCFTable <- annotIndexedVCF(locIndexedVCF$path)
########### [RStudio] Print the basic table and available annotations in a txt file ###########
# Works only with basic table
try(write.table(preAnnotVCFTable[,1:5],"test_files\\annotated_indVCF.txt", append = FALSE, sep="\t",row.names=FALSE))
try(write.table(colnames(preAnnotVCFTable[6:length(preAnnotVCFTable)]),"test_files\\available_annotations_indVCF.txt", append = FALSE, sep="\t",row.names=FALSE))
}
########### [Code] Main method ########
indexVCFfile <- function(path_to_vcf, path_to_indexed_files) {
library(Rsamtools)
library(cellbaseR)
from <- path_to_vcf
to <- tempfile(pattern = "indexedVCF", tmpdir = path_to_indexed_files, fileext = "")
zipped <- bgzip(from, to)
idx <- indexTabix(file = zipped, format = "vcf", comment = "#")
tab <- TabixFile(zipped, idx)
return (tab)
}
########### [Code] Determinate if running in TERR or standard R version #############
isTERR<-R.Version()
Rversion<-NULL
if (!is.null(isTERR[["TERR.version"]])) {
########### [TIBCO] Load RinR library ###################
library(RinR)
########### [TIBCO] Determinate R interpreter location ########
Rversion <- makeREvaluator("R", RHome = "C:/Program Files/R/R-3.4.1")
########### [TIBCO] Get the input variables ############
path_to_vcf <- "C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\R_2015_01_27_14_48_49_user_XEN-66-Haloplex_316_Nefro_pool24_124_2305.vcf"
path_to_indexed_files <-"C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\test_files\\indexedVCFfiles"
########### [TIBCO] Create the REvaluate object to execute main method ########
locIndexedVCF <- REvaluate({
loc_indexed_VCF <- indexVCFfile(path_to_vcf, path_to_indexed_files)
}
, data = list(indexVCFfile = indexVCFfile, path_to_vcf = path_to_vcf, path_to_indexed_files = path_to_indexed_files)
# , REvaluator = Rversion
# , verbose	= TRUE
)
########### [TIBCO] Convert the instance file to a Blob Object ########
locIndexedVCFBlob <- SObjectToBlob(locIndexedVCF)
} else {
########### [RStudio] Set Working directory ############
setwd("C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk")
########### [RStudio] Get the input variables ############
path_to_vcf <- "C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\R_2015_01_27_14_48_49_user_XEN-66-Haloplex_316_Nefro_pool24_124_2305.vcf"
path_to_indexed_files <-"C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\test_files\\indexedVCFfiles"
########### [RStudio] Execute main method ###########
locIndexedVCF <- indexVCFfile(path_to_vcf, path_to_indexed_files)
########### [RStudio] Print the ouput in a txt file ###########
sink("C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\test_files\\indexedVCFfiles\\locIndexedVCF")
str(locIndexedVCF)
sink()
}
########### [Code] Main method ########
annotIndexedVCF<- function(path_to_indexed_files) {
############# [Code] Load libraries #############
library(RCurl)
library(jsonlite)
library(cellbaseR)
library(dplyr)
library(tidyr)
############# [Code] Annotate the VCF file with cellbase ############
path_to_indexed_files <- locIndexedVCF$path # TEST LINE
cb <- CellBaseR()
fl <- path_to_indexed_files
annotVCF_table <- AnnotateVcf(object=cb, file=fl, BPPARAM = bpparam(workers=2))
# Change the name of the "id" column to avoid repetition
colnames(annotVCF_table)[5] <- "rsID"
return(annotVCF_table)
}
########### [Code] Determinate if running in TERR or standard R version #############
isTERR<-R.Version()
Rversion<-NULL
if (!is.null(isTERR[["TERR.version"]])) {
########### [TIBCO] Load RinR library ###################
library(RinR)
########### [TIBCO] Determinate R interpreter location ########
Rversion <- makeREvaluator("R", RHome = "C:/Program Files/R/R-3.4.1")
path_to_indexed_files <- locIndexedVCF$path
########### [TIBCO] Create the REvaluate object to execute main method ########
preAnnotVCFTable <- REvaluate({
annotVCF_table <- annotIndexedVCF(path_to_indexed_files)
annotVCF_table
}
, data = list(annotIndexedVCF = annotIndexedVCF, path_to_indexed_files = path_to_indexed_files)
# , REvaluator = Rversion
# , verbose	= TRUE
)
########### [TIBCO] Convert the table to a Blob Object ########
preAnnotVCFTableBlob <- SObjectToBlob(preAnnotVCFTable)
} else {
########### [RStudio] Set Working directory ############
setwd("C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk")
########### [RStudio] Execute main method ###########
# Note: the variable locIndexedVCF is the instance file of the indexed files
# and comes from a previous script
preAnnotVCFTable <- annotIndexedVCF(locIndexedVCF$path)
########### [RStudio] Print the basic table and available annotations in a txt file ###########
# Works only with basic table
try(write.table(preAnnotVCFTable[,1:5],"test_files\\annotated_indVCF.txt", append = FALSE, sep="\t",row.names=FALSE))
try(write.table(colnames(preAnnotVCFTable[6:length(preAnnotVCFTable)]),"test_files\\available_annotations_indVCF.txt", append = FALSE, sep="\t",row.names=FALSE))
}
########### [Code] Build a basic table that could be loaded whithout problems ########
# This table has no nested data.frame neither nested list
basicTable <- preAnnotVCFTable[,1:5]
########### [Code] Get the available annotations ############
availableAnnots <- colnames(preAnnotVCFTable[6:length(preAnnotVCFTable)])
save.image("~/GitHub/vcf_pk/annotatedVCFTable.RData")
