print (paste("Analyzing columns of variant", i))
k = 1
for (column in annotVariant) {
print(paste("Column", k))
the_class <- class(column)
the_dim <- dim(column)
# the_name <-
if (length(the_dim) != 0){
print (paste("Column", k, "has a problem !!!!!!!!!!!!"))
annotVariant_sub <- annotVariant[,-k]
dim_column <- column
colnames(dim_column)
print (paste("Dimension for column", k, "is the following:", dim(column)))
print (paste("Class for column", k, "is the following:", class(column)))
variant = i
column = k
class = the_class
dimension = the_dim
one_problem <- data.frame(variant, column, dimension, class)
problems <- bind_rows(problems, one_problem)
for(element in dim_column) {
}
}
k = k + 1
annotVariants_table <- bind_rows(annotVariants_table, annotVariant_sub)
}
# end of testing block 2
}
}
# warnings()
}
for (i in 1:var_number) {
print (paste("Processing variant number:", i)) # this line is for testing
# extract the chromosome
var_chrom <- variant_table[i,1]
# extract the range
var_range <- variant_table[i,2]
# extract the ref and alt alleles
# WARNING: you could have more than one allele in each field
# so that this formula extract only the first one to do the annotation call
# IS THAT A GOOD APPROACH ?
var_refAl <- substring((variant_table[i,4]), 1, 1)
var_altAl <- substring((variant_table[i,5]), 1, 1)
# Get variant cellbase info with cellbaseR package
variant <- paste(var_chrom, ":", var_range, ":", var_refAl, ":", var_altAl, sep = "")
annotVariant <- getVariant(object=cb, ids=variant, resource="annotation")
# set the vector of column dimension to 0
columns_dim <- integer()
columns_class <- character
if (nrow(annotVariant)==0) { # the result is an empty data.frame
print (paste("WARNING for variant", i, "EMPTY RESULT!"))
annotVariant <- data.frame(var_chrom, as.integer(var_range), var_refAl, var_altAl)
colnames(annotVariant) <- c("chromosome", "start", "reference", "alternate")
annotVariants_table <- bind_rows(annotVariants_table, annotVariant)
} else {
for (column in annotVariant) {
first_dim <- dim(column)
first_class <- class(column)
columns_dim <- c(columns_dim, dim(column))
columns_class <- c(columns_class, class(column))
}
if (length(columns_dim) == 0) { # normal situation, no column with dimension > 0
annotVariants_table <- bind_rows(annotVariants_table, annotVariant)
} else { # anormal situation, there is one or more columns with dimension > 0
print (paste("WARNING for variant", i, "MULTIDIMENSIONAL element(s)"))
# annotVariants_table <- bind_rows(annotVariants_table, annotVariant)
annotVariant_sub <- annotVariant
# reducedTable <- annotVariant[c(1:9)] # testing line
# # variantTraitAssociation_df2 <- annotVariant$variantTraitAssociation
# annotVariants_table <- bind_rows(annotVariants_table, reducedTable) # testing line
############ testing block 2 #############
print (paste("Analyzing columns of variant", i))
k = 1
for (column in annotVariant) {
k = k + 1
print(paste("Column", k))
the_class <- class(column)
the_dim <- dim(column)
# the_name <-
if (length(the_dim) != 0){
print (paste("Column", k, "has a problem !!!!!!!!!!!!"))
annotVariant_sub <- annotVariant[,-k]
dim_column <- column
colnames(dim_column)
print (paste("Dimension for column", k, "is the following:", dim(column)))
print (paste("Class for column", k, "is the following:", class(column)))
variant = i
column = k
class = the_class
dimension = the_dim
one_problem <- data.frame(variant, column, dimension, class)
problems <- bind_rows(problems, one_problem)
}
annotVariants_table <- bind_rows(annotVariants_table, annotVariant_sub)
}
# end of testing block 2
}
}
# warnings()
}
var_number <- nrow(variant_table)
cb <- CellBaseR()
annotVariants_table <- data.frame()
problems <- data.frame(variant=integer(0), column=integer(0), dimension=integer(0), class=character(0)) # testing line
variant_table <- read.table("test_files\\variants_table.txt", header=TRUE) # for RStudio
var_number <- nrow(variant_table)
cb <- CellBaseR()
annotVariants_table <- data.frame()
problems <- data.frame(variant=integer(0), column=integer(0), dimension=integer(0), class=character(0)) # testing line
for (i in 1:var_number) {
print (paste("Processing variant number:", i)) # this line is for testing
# extract the chromosome
var_chrom <- variant_table[i,1]
# extract the range
var_range <- variant_table[i,2]
# extract the ref and alt alleles
# WARNING: you could have more than one allele in each field
# so that this formula extract only the first one to do the annotation call
# IS THAT A GOOD APPROACH ?
var_refAl <- substring((variant_table[i,4]), 1, 1)
var_altAl <- substring((variant_table[i,5]), 1, 1)
# Get variant cellbase info with cellbaseR package
variant <- paste(var_chrom, ":", var_range, ":", var_refAl, ":", var_altAl, sep = "")
annotVariant <- getVariant(object=cb, ids=variant, resource="annotation")
# set the vector of column dimension to 0
columns_dim <- integer()
columns_class <- character
if (nrow(annotVariant)==0) { # the result is an empty data.frame
print (paste("WARNING for variant", i, "EMPTY RESULT!"))
annotVariant <- data.frame(var_chrom, as.integer(var_range), var_refAl, var_altAl)
colnames(annotVariant) <- c("chromosome", "start", "reference", "alternate")
annotVariants_table <- bind_rows(annotVariants_table, annotVariant)
} else {
for (column in annotVariant) {
first_dim <- dim(column)
first_class <- class(column)
columns_dim <- c(columns_dim, dim(column))
columns_class <- c(columns_class, class(column))
}
if (length(columns_dim) == 0) { # normal situation, no column with dimension > 0
annotVariants_table <- bind_rows(annotVariants_table, annotVariant)
} else { # anormal situation, there is one or more columns with dimension > 0
print (paste("WARNING for variant", i, "MULTIDIMENSIONAL element(s)"))
# annotVariants_table <- bind_rows(annotVariants_table, annotVariant)
annotVariant_sub <- annotVariant
# reducedTable <- annotVariant[c(1:9)] # testing line
# # variantTraitAssociation_df2 <- annotVariant$variantTraitAssociation
# annotVariants_table <- bind_rows(annotVariants_table, reducedTable) # testing line
############ testing block 2 #############
print (paste("Analyzing columns of variant", i))
k = 1
for (column in annotVariant) {
k = k + 1
print(paste("Column", k))
the_class <- class(column)
the_dim <- dim(column)
# the_name <-
if (length(the_dim) != 0){
print (paste("Column", k, "has a problem !!!!!!!!!!!!"))
annotVariant_sub <- annotVariant[,-k]
dim_column <- column
colnames(dim_column)
print (paste("Dimension for column", k, "is the following:", dim(column)))
print (paste("Class for column", k, "is the following:", class(column)))
variant = i
column = k
class = the_class
dimension = the_dim
one_problem <- data.frame(variant, column, dimension, class)
problems <- bind_rows(problems, one_problem)
}
annotVariants_table <- bind_rows(annotVariants_table, annotVariant_sub)
}
# end of testing block 2
}
}
# warnings()
}
View(problems)
for (i in 1:var_number) {
print (paste("Processing variant number:", i)) # this line is for testing
# extract the chromosome
var_chrom <- variant_table[i,1]
# extract the range
var_range <- variant_table[i,2]
# extract the ref and alt alleles
# WARNING: you could have more than one allele in each field
# so that this formula extract only the first one to do the annotation call
# IS THAT A GOOD APPROACH ?
var_refAl <- substring((variant_table[i,4]), 1, 1)
var_altAl <- substring((variant_table[i,5]), 1, 1)
# Get variant cellbase info with cellbaseR package
variant <- paste(var_chrom, ":", var_range, ":", var_refAl, ":", var_altAl, sep = "")
annotVariant <- getVariant(object=cb, ids=variant, resource="annotation")
# set the vector of column dimension to 0
columns_dim <- integer()
columns_class <- character
if (nrow(annotVariant)==0) { # the result is an empty data.frame
print (paste("WARNING for variant", i, "EMPTY RESULT!"))
annotVariant <- data.frame(var_chrom, as.integer(var_range), var_refAl, var_altAl)
colnames(annotVariant) <- c("chromosome", "start", "reference", "alternate")
annotVariants_table <- bind_rows(annotVariants_table, annotVariant)
} else {
for (column in annotVariant) {
first_dim <- dim(column)
first_class <- class(column)
columns_dim <- c(columns_dim, dim(column))
columns_class <- c(columns_class, class(column))
}
if (length(columns_dim) == 0) { # normal situation, no column with dimension > 0
annotVariants_table <- bind_rows(annotVariants_table, annotVariant)
} else { # anormal situation, there is one or more columns with dimension > 0
print (paste("WARNING for variant", i, "MULTIDIMENSIONAL element(s)"))
# annotVariants_table <- bind_rows(annotVariants_table, annotVariant)
annotVariant_sub <- annotVariant
# reducedTable <- annotVariant[c(1:9)] # testing line
# # variantTraitAssociation_df2 <- annotVariant$variantTraitAssociation
# annotVariants_table <- bind_rows(annotVariants_table, reducedTable) # testing line
############ testing block 2 #############
print (paste("Analyzing columns of variant", i))
k = 1
for (column in annotVariant) {
print(paste("Column", k))
the_class <- class(column)
the_dim <- dim(column)
# the_name <-
if (length(the_dim) != 0){
print (paste("Column", k, "has a problem !!!!!!!!!!!!"))
annotVariant_sub <- annotVariant[,-k]
dim_column <- column
colnames(dim_column)
print (paste("Dimension for column", k, "is the following:", dim(column)))
print (paste("Class for column", k, "is the following:", class(column)))
variant = i
column = k
class = the_class
dimension = the_dim
one_problem <- data.frame(variant, column, dimension, class)
problems <- bind_rows(problems, one_problem)
}
k = k + 1
}
# end of testing block 2
annotVariants_table <- bind_rows(annotVariants_table, annotVariant_sub)
}
}
# warnings()
}
View(annotVariants_table)
View(dim_column)
View(annotVariant)
dim_column[1]
annotVariant_sub <- cbind(annotVariant, dim_column[1])
View(annotVariant_sub)
variant_table <- read.table("test_files\\variants_table.txt", header=TRUE) # for RStudio
var_number <- nrow(variant_table)
cb <- CellBaseR()
annotVariants_table <- data.frame()
problems <- data.frame(variant=integer(0), column=integer(0), dimension=integer(0), class=character(0)) # testing line
for (i in 1:var_number) {
print (paste("Processing variant number:", i)) # this line is for testing
# extract the chromosome
var_chrom <- variant_table[i,1]
# extract the range
var_range <- variant_table[i,2]
# extract the ref and alt alleles
# WARNING: you could have more than one allele in each field
# so that this formula extract only the first one to do the annotation call
# IS THAT A GOOD APPROACH ?
var_refAl <- substring((variant_table[i,4]), 1, 1)
var_altAl <- substring((variant_table[i,5]), 1, 1)
# Get variant cellbase info with cellbaseR package
variant <- paste(var_chrom, ":", var_range, ":", var_refAl, ":", var_altAl, sep = "")
annotVariant <- getVariant(object=cb, ids=variant, resource="annotation")
if (nrow(annotVariant)==0) { # the result is an empty data.frame
print (paste("WARNING for variant", i, "EMPTY RESULT!"))
annotVariant <- data.frame(var_chrom, as.integer(var_range), var_refAl, var_altAl)
colnames(annotVariant) <- c("chromosome", "start", "reference", "alternate")
annotVariants_table <- bind_rows(annotVariants_table, annotVariant)
} else {
for (column in annotVariant) {
first_dim <- dim(column)
first_class <- class(column)
columns_dim <- c(columns_dim, dim(column))
columns_class <- c(columns_class, class(column))
}
if (length(columns_dim) == 0) { # normal situation, no column with dimension > 0
annotVariants_table <- bind_rows(annotVariants_table, annotVariant)
} else { # anormal situation, there is one or more columns with dimension > 0
print (paste("WARNING for variant", i, "MULTIDIMENSIONAL element(s)"))
annotVariant_sub <- annotVariant
print (paste("Analyzing columns of variant", i)) # testing line
k = 1
for (column in annotVariant) {
the_class <- class(column)
the_dim <- dim(column)
# the_name <-
if (length(the_dim) != 0){
print (paste("Column", k, "has a dimentional problem.")) # testing line
problem_column <- column # testing line
# Remove the problematic column, split it and add it again to the dataframe
annotVariant_sub <- annotVariant[,-k]
annotVariant_sub <- cbind(annotVariant_sub, column[1], column[2])
# To record variants with dimentional problem
variant = i
column = k
class = the_class
dimension = the_dim
one_problem <- data.frame(variant, column, dimension, class)
problems <- bind_rows(problems, one_problem)
}
k = k + 1
}
# end of testing block 2
annotVariants_table <- bind_rows(annotVariants_table, annotVariant_sub)
}
}
# warnings()
}
for (i in 1:var_number) {
print (paste("Processing variant number:", i)) # this line is for testing
# extract the chromosome
var_chrom <- variant_table[i,1]
# extract the range
var_range <- variant_table[i,2]
# extract the ref and alt alleles
# WARNING: you could have more than one allele in each field
# so that this formula extract only the first one to do the annotation call
# IS THAT A GOOD APPROACH ?
var_refAl <- substring((variant_table[i,4]), 1, 1)
var_altAl <- substring((variant_table[i,5]), 1, 1)
# Get variant cellbase info with cellbaseR package
variant <- paste(var_chrom, ":", var_range, ":", var_refAl, ":", var_altAl, sep = "")
annotVariant <- getVariant(object=cb, ids=variant, resource="annotation")
if (nrow(annotVariant)==0) { # the result is an empty data.frame
print (paste("WARNING for variant", i, "EMPTY RESULT!"))
annotVariant <- data.frame(var_chrom, as.integer(var_range), var_refAl, var_altAl)
colnames(annotVariant) <- c("chromosome", "start", "reference", "alternate")
annotVariants_table <- bind_rows(annotVariants_table, annotVariant)
} else {
for (column in annotVariant) {
first_dim <- dim(column)
first_class <- class(column)
}
if (length(columns_dim) == 0) { # normal situation, no column with dimension > 0
annotVariants_table <- bind_rows(annotVariants_table, annotVariant)
} else { # anormal situation, there is one or more columns with dimension > 0
print (paste("WARNING for variant", i, "MULTIDIMENSIONAL element(s)"))
annotVariant_sub <- annotVariant
print (paste("Analyzing columns of variant", i)) # testing line
k = 1
for (column in annotVariant) {
the_class <- class(column)
the_dim <- dim(column)
# the_name <-
if (length(the_dim) != 0){
print (paste("Column", k, "has a dimentional problem.")) # testing line
problem_column <- column # testing line
# Remove the problematic column, split it and add it again to the dataframe
annotVariant_sub <- annotVariant[,-k]
annotVariant_sub <- cbind(annotVariant_sub, column[1], column[2])
# To record variants with dimentional problem
variant = i
column = k
class = the_class
dimension = the_dim
one_problem <- data.frame(variant, column, dimension, class)
problems <- bind_rows(problems, one_problem)
}
k = k + 1
}
# end of testing block 2
annotVariants_table <- bind_rows(annotVariants_table, annotVariant_sub)
}
}
# warnings()
}
for (i in 1:var_number) {
print (paste("Processing variant number:", i)) # this line is for testing
# extract the chromosome
var_chrom <- variant_table[i,1]
# extract the range
var_range <- variant_table[i,2]
# extract the ref and alt alleles
# WARNING: you could have more than one allele in each field
# so that this formula extract only the first one to do the annotation call
# IS THAT A GOOD APPROACH ?
var_refAl <- substring((variant_table[i,4]), 1, 1)
var_altAl <- substring((variant_table[i,5]), 1, 1)
# Get variant cellbase info with cellbaseR package
variant <- paste(var_chrom, ":", var_range, ":", var_refAl, ":", var_altAl, sep = "")
annotVariant <- getVariant(object=cb, ids=variant, resource="annotation")
# set the vector of column dimension to 0
columns_dim <- integer()
if (nrow(annotVariant)==0) { # the result is an empty data.frame
print (paste("WARNING for variant", i, "EMPTY RESULT!"))
annotVariant <- data.frame(var_chrom, as.integer(var_range), var_refAl, var_altAl)
colnames(annotVariant) <- c("chromosome", "start", "reference", "alternate")
annotVariants_table <- bind_rows(annotVariants_table, annotVariant)
} else {
for (column in annotVariant) {
columns_dim <- c(columns_dim, dim(column))
}
if (length(columns_dim) == 0) { # normal situation, no column with dimension > 0
annotVariants_table <- bind_rows(annotVariants_table, annotVariant)
} else { # anormal situation, there is one or more columns with dimension > 0
print (paste("WARNING for variant", i, "MULTIDIMENSIONAL element(s)"))
annotVariant_sub <- annotVariant
print (paste("Analyzing columns of variant", i)) # testing line
k = 1
for (column in annotVariant) {
the_class <- class(column)
the_dim <- dim(column)
# the_name <-
if (length(the_dim) != 0){
print (paste("Column", k, "has a dimentional problem.")) # testing line
problem_column <- column # testing line
# Remove the problematic column, split it and add it again to the dataframe
annotVariant_sub <- annotVariant[,-k]
annotVariant_sub <- cbind(annotVariant_sub, column[1], column[2])
# To record variants with dimentional problem
variant = i
column = k
class = the_class
dimension = the_dim
one_problem <- data.frame(variant, column, dimension, class)
problems <- bind_rows(problems, one_problem)
}
k = k + 1
}
# end of testing block 2
annotVariants_table <- bind_rows(annotVariants_table, annotVariant_sub)
}
}
# warnings()
}
View(problems)
try(write.table(annotVariants_table,"test_files\\CB_variants_table.txt", append = TRUE, sep="\t",row.names=FALSE))
View(annotVariants_table)
variant_table <- read.table("test_files\\variants_table.txt", header=TRUE) # for RStudio
var_number <- nrow(variant_table)
cb <- CellBaseR()
# Initialize the annotation table
annotVariants_table <- data.frame()
# Initialize a table to record any problem about dimension
problems <- data.frame(variant=integer(0), column=integer(0), dimension=integer(0), class=character(0)) # testing line
for (i in 1:var_number) {
print (paste("Processing variant number:", i)) # this line is for testing
# extract the chromosome
var_chrom <- variant_table[i,1]
# extract the range
var_range <- variant_table[i,2]
# extract the ref and alt alleles
# WARNING: you could have more than one allele in each field
# so that this formula extract only the first one to do the annotation call
# IS THAT A GOOD APPROACH ?
var_refAl <- substring((variant_table[i,4]), 1, 1)
var_altAl <- substring((variant_table[i,5]), 1, 1)
# Get variant cellbase info with cellbaseR package
# the call will return as a data.frame
variant <- paste(var_chrom, ":", var_range, ":", var_refAl, ":", var_altAl, sep = "")
annotVariant <- getVariant(object=cb, ids=variant, resource="annotation")
# set the vector of column dimension to 0
# This is important to control calls that return data.frame with dimension problems
columns_dim <- integer()
if (nrow(annotVariant)==0) { # if the call returns an empty data.frame
print (paste("WARNING for variant", i, "EMPTY RESULT!"))
# build the data.frame with the available information
annotVariant <- data.frame(var_chrom, as.integer(var_range), var_refAl, var_altAl)
colnames(annotVariant) <- c("chromosome", "start", "reference", "alternate")
annotVariants_table <- bind_rows(annotVariants_table, annotVariant)
} else {
# control the dimension of each column in the dataframe
for (column in annotVariant) {
columns_dim <- c(columns_dim, dim(column))
}
# normal situation, no column with dimension > 1
if (length(columns_dim) == 0) {
annotVariants_table <- bind_rows(annotVariants_table, annotVariant)
} else {
# anormal situation, there is one or more columns with dimension > 0
print (paste("WARNING for variant", i, "MULTIDIMENSIONAL column(s)"))
# assign the data.frame to a new variable
annotVariant_sub <- annotVariant
# Scan the data.frame in order to find the problematic column
print (paste("Analyzing columns of variant", i)) # testing line
k = 1
for (column in annotVariant) {
the_class <- class(column)
the_dim <- dim(column)
# the_name <-
if (length(the_dim) != 0){
print (paste("Column", k, "has a dimensional problem.")) # testing line
# Remove the problematic column, split it and add it again to the dataframe
annotVariant_sub <- cbind(annotVariant[,-k], column[1], column[2])
# To record variants with dimensional problem
variant = i
column = k
class = the_class
dimension = the_dim
one_problem <- data.frame(variant, column, dimension, class)
problems <- bind_rows(problems, one_problem)
}
k = k + 1
}
# end of testing block 2
annotVariants_table <- bind_rows(annotVariants_table, annotVariant_sub)
}
}
# warnings()
}
View(problems)
