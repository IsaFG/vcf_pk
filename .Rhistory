query<-getURL("bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/latest/hsapiens/feature/gene/BRCA2,BRCA1,KRAS/info")
query<-getURL("bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/latest/hsapiens/feature/gene/BRCA2,BRCA1,KRAS/info")
query # podemos mostrar el JSON en pantalla
querydf<-fromJSON(query)
query_warnings<-querydf$warning
query_errors<-querydf$error
query_result<-querydf$response
query_stats<-data.frame(query_result[c("id","numTotalResults","numResults")])
names(query_stats)[1]<-"query"
query_stats
queries_with_results<- rowSums(query_stats[,c(2,3)])>0
queries_with_results
retrieved_results<-query_result$result[queries_with_results]
test<-data.frame(retrieved_results[[1]]$id,retrieved_results[[1]]$name,retrieved_results[[1]]$description,retrieved_results[[1]]$drugInteractions)
test
View(test)
View(test)
install.packages("installr"); library(installr) # install+load installr
updateR() # updating R.
load("~/.RData")
load("~/GitHub/vcf_pk/.RData")
########### [Code] Main method ########
indexVCFfile <- function(path_to_vcf, path_to_indexed_files) {
library(Rsamtools)
from <- path_to_vcf
to <- tempfile(pattern = "indexedVCF.", tmpdir = path_to_indexed_files, fileext = "")
zipped <- bgzip(from, to)
idx <- indexTabix(file = zipped, format = "vcf", comment = "#")
tab <- TabixFile(zipped, idx)
return (tab)
}
########### [Code] Determinate if running in TERR or standard R version #############
isTERR<-R.Version()
Rversion<-NULL
if (!is.null(isTERR[["TERR.version"]])) {
########### [TIBCO] Load RinR library ###################
library(RinR)
########### [TIBCO] Determinate R interpreter location ########
Rversion <- makeREvaluator("R", RHome = "C:/Program Files/R/R-3.4.1")
########### [TIBCO] Get the input variables ############
# path_to_vcf <- "C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\samples\\R_2015_01_27_14_48_49_user_XEN-66-Haloplex_316_Nefro_pool24_124_2305.vcf"
path_to_vcf <- "C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\samples\\NA12878.chr.22.vcf"
path_to_indexed_files <-"C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\test_files\\indexedVCFfiles"
########### [TIBCO] Create the REvaluate object to execute main method ########
locIndexedVCF <- REvaluate({
loc_indexed_VCF <- indexVCFfile(path_to_vcf, path_to_indexed_files)
}
, data = list(indexVCFfile = indexVCFfile, path_to_vcf = path_to_vcf, path_to_indexed_files = path_to_indexed_files)
# , REvaluator = Rversion
# , verbose	= TRUE
)
########### [TIBCO] Convert the instance file to a Blob Object ########
locIndexedVCFBlob <- SObjectToBlob(locIndexedVCF)
} else {
########### [RStudio] Set Working directory ############
setwd("C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk")
########### [RStudio] Get the input variables ############
# path_to_vcf <- "C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\R_2015_01_27_14_48_49_user_XEN-66-Haloplex_316_Nefro_pool24_124_2305.vcf"
path_to_vcf <- "C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\samples\\NA12878.chr.22.vcf"
path_to_indexed_files <-"C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\test_files\\indexedVCFfiles"
########### [RStudio] Execute main method ###########
locIndexedVCF <- indexVCFfile(path_to_vcf, path_to_indexed_files)
########### [RStudio] Print the ouput in a txt file ###########
sink("C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\test_files\\indexedVCFfiles\\locIndexedVCF")
str(locIndexedVCF)
sink()
}
########### [Code] Method 1 : query CellBase with the VCF file ########
annotIndexedVCF<- function(path_to_indexed_files) {
############# [Code] Load libraries #############
library(cellbaseR)
############# [Code] Annotate the VCF file with cellbase ############
path_to_indexed_files <- locIndexedVCF$path # TEST LINE
cb <- CellBaseR()
fl <- path_to_indexed_files
annotVCF_table <- AnnotateVcf(object=cb, file=fl, BPPARAM = bpparam(workers=2))
# Change the name of the "id" column to avoid repetition
colnames(annotVCF_table)[5] <- "rsID"
return(annotVCF_table)
}
########### [Code] Method 2 : post-process the annotation table ########
getAnnotVariantsTable <- function(preAnnotVCFTable) {
############# [Code] Load libraries #############
library(dplyr)
############# [Code] Post-process the table ############
var_number <- nrow(preAnnotVCFTable)
class_vec <- lapply(preAnnotVCFTable, class)
dim_vec <- lapply(preAnnotVCFTable, dim)
for (i in 1:length(preAnnotVCFTable)) {
col_name <- names(class_vec)[i]
col_class <- class_vec[[col_name]]
col_dim <- dim_vec[[col_name]]
print (paste("Processing column", i, ":", col_name, ", class: ", col_class, ", dimension", col_dim)) # this line is for testing
# if (class_chr=="data.frame")  {
if (is.null(col_dim) == FALSE) {  # anormal situation, the column has a dimension > 0
print (paste("WARNING for column", col_name, ": MULTIDIMENSIONAL column(s)"))
# col_name <- "variantTraitAssociation" # TESTING LINE
# i <- 16 # TESTING LINE
# assign the data.frame to a new variable
nested_df <- data.frame(preAnnotVCFTable[[col_name]])
# Scan the data.frame in order to find the problematic column(s)
print (paste("Analyzing columns of column", col_name)) # testing line
# Build the table with all the annotation
# Subset the original table
preAnnotVCFTable_sub <- bind_cols(preAnnotVCFTable[1:(i-1)], preAnnotVCFTable[(i+1):length(preAnnotVCFTable)])
annotVCFTable <- bind_cols(preAnnotVCFTable_sub, nested_df)
}
# warnings()
i <- i + 1
}
return(annotVCFTable)
}
########### [Code] Determinate if running in TERR or standard R version #############
isTERR<-R.Version()
Rversion<-NULL
if (!is.null(isTERR[["TERR.version"]])) {
########### [TIBCO] Load RinR library ###################
library(RinR)
########### [TIBCO] Determinate R interpreter location ########
Rversion <- makeREvaluator("R", RHome = "C:/Program Files/R/R-3.4.1")
path_to_indexed_files <- locIndexedVCF$path
########### [TIBCO] Create the REvaluate object to execute method 1 ########
preAnnotVCFTable <- REvaluate({
annotVCF_table <- annotIndexedVCF(path_to_indexed_files)
annotVCF_table
}
, data = list(annotIndexedVCF = annotIndexedVCF, path_to_indexed_files = path_to_indexed_files)
# , REvaluator = Rversion
# , verbose	= TRUE
)
########### [TIBCO] Create the REvaluate object to execute method 2 ########
annotVCFTable <- REvaluate({
annotVariants_table <- getAnnotVariantsTable(preAnnotVCFTable)
annotVariants_table
}
, data = list(getAnnotVariantsTable = getAnnotVariantsTable, preAnnotVCFTable = preAnnotVCFTable)
# , REvaluator = Rversion
# , verbose	= TRUE
)
########### [TIBCO] Convert the tables to Blob Objects ########
preAnnotVCFTableBlob <- SObjectToBlob(preAnnotVCFTable)
annotVCFTableBlob <- SObjectToBlob(annotVCFTable)
} else {
########### [RStudio] Set Working directory ############
setwd("C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk")
########### [RStudio] Execute method 1 ###########
# Note: the variable locIndexedVCF is the instance file of the indexed files
# and comes from a previous script
preAnnotVCFTable <- annotIndexedVCF(locIndexedVCF$path)
########### [RStudio] Execute method 2 ###########
annotVCFTable <- getAnnotVariantsTable(preAnnotVCFTable)
########### [RStudio] Print the basic table and available annotations in a txt file ###########
# Works only with basic table
try(write.table(preAnnotVCFTable[,1:5],"test_files\\annotated_indVCF.txt", append = FALSE, sep="\t",row.names=FALSE))
try(write.table(colnames(preAnnotVCFTable[6:length(preAnnotVCFTable)]),"test_files\\available_annotations_indVCF.txt", append = FALSE, sep="\t",row.names=FALSE))
}
########### [Code] Build a basic table that could be loaded whithout problems ########
# This table has no nested data.frame neither nested list
basicTable <- annotVCFTable[,1:5]
########### [Code] Get the available annotations ############
availableAnnots <- colnames(annotVCFTable[5:length(annotVCFTable)])
save.image("~/GitHub/vcf_pk/NA12878.chr.22.RData")
########### [Code] Main method ########
getvcfDataframe <- function(my_vcf) {
############# [CODE] Load libraries ###################
library(GenomicAlignments)
library(VariantAnnotation)
############# [CODE] Extract the VCF ###################
# Extract the VCF as an object type "CollapsedVCF" (VariantAnnotation package)
vcf_extracted <- readVcf(my_vcf, "hg19")
############# [CODE] Extract a GRanges object from the CollapsedVCF ###################
vcfGRanges <- rowRanges(vcf_extracted)
# ############# [TEST] Determinate a sample for testing #########
# # Get a random sample from the GRanges object for testing
# my_sample_num <- sort(sample(length(vcfGRanges), 40))
# vcf_sample <- vcfGRanges[c(my_sample_num)]
#
# # assign the vcf_sample to the main variable (only for testing)
# vcfGRanges <- vcf_sample
############# [CODE] Pass the Formal class GRanges to a data frame ###################
GRangesdf <- data.frame(vcfGRanges)
ranges_start <- start(ranges(vcfGRanges))
ranges_end <- end(ranges(vcfGRanges))
chroms_vec_chr <- as.character(seqnames(vcfGRanges))
# Next to that, remove the "chr" characters in the chromosome vector,
# in order to only maintain the number, then store it in a new vector
string_to_remove <- "chr"
chroms_vec <- gsub(x = chroms_vec_chr, pattern = paste(string_to_remove, collapse = "|"), replacement = "")
############# [CODE] Extract the REFERENCE alleles of the variants ###################
# The REF allele comes from the dataframe
REFal <- as.character(vcfGRanges$REF)
############# [CODE] Extract the ALTERNATE alleles of the variants ###################
# ALT allele is the result of a S4 method
# the data will be extracted directly from vcf_extracted
# as a DNAStringSetList which will be passed to a dataframe
# Then the duplicated value (which display in different rows) will be unificate in an unique row
ALTal_df <- data.frame(vcfGRanges$ALT)
i <- 1
for (boolresult in duplicated(ALTal_df[,1])) {
if (boolresult == TRUE) {
ALTal_df[,3][[i-1]] <- paste(ALTal_df[,3][[i-1]], ALTal_df[,3][[i]], sep=",")
ALTal_df <- ALTal_df[-c(i),]
}
i <- i + 1
}
ALTal <- ALTal_df[3][[1]]
############# [CODE] Extract quality and filter information ##############
qual_vec <- vcfGRanges$QUAL
filter_vec <- vcfGRanges$FILTER
############# [CODE] Build the dataframe with the extracted information ###################
# Build the dataframe
vcfDataframe <- data.frame(chroms_vec, ranges_start, ranges_end, REFal, ALTal, qual_vec, filter_vec)
colnames(vcfDataframe) <- c("chromosome", "start", "end", "reference", "alternate", "quality", "filter")
return(vcfDataframe)
}
########### [Code] Determinate if running in TERR or standard R version #############
isTERR<-R.Version()
Rversion<-NULL
if (!is.null(isTERR[["TERR.version"]])) {
########### [TIBCO] Load RinR library #############
library(RinR)
########### [TIBCO] Determinate R interpreter location ########
Rversion <- makeREvaluator("R", RHome = "C:/Program Files/R/R-3.4.1")
########### [TIBCO] Determinate path of the VCF ##############
# Ask user to introduce the path to the VCF
# PENDING CODE OR TIBCO FUNCTION
my_vcf <- "C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\samples\\NA12878.chr.22.vcf"
########### [TIBCO] Create the REvaluate object ########
vcfDataframe <- REvaluate({
vcfDataframe <- getvcfDataframe(my_vcf)
vcfDataframe
}
,
data = list(getvcfDataframe = getvcfDataframe, my_vcf = my_vcf)
)
} else {
# ############# [RStudio] Set Working directory ############
# Please uncoment the next line changin the working directory by the correct one:
setwd("C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk")
########### [RStudio] Determinate path of the VCF ##############
# Please edit the following code line to put the correct path to your VCF
my_vcf <- "C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\samples\\NA12878.chr.22.vcf"
########### [RStudio] Get the dataframe ########################
vcfDataframe <- getvcfDataframe(my_vcf)
########### [Rstudio] Send the dataframe to a txt file ###################
write.table(vcfDataframe,"test_files\\variants_table.txt",sep="\t",row.names=FALSE)
}
View(vcfDataframe)
load("~/GitHub/vcf_pk/NA12878.chr.22.RData")
########### [Code] Main method ########
indexVCFfile <- function(path_to_vcf, path_to_indexed_files) {
library(Rsamtools)
from <- path_to_vcf
to <- tempfile(pattern = "indexedVCF.", tmpdir = path_to_indexed_files, fileext = "")
zipped <- bgzip(from, to)
idx <- indexTabix(file = zipped, format = "vcf", comment = "#")
tab <- TabixFile(zipped, idx)
return (tab)
}
########### [Code] Determinate if running in TERR or standard R version #############
isTERR<-R.Version()
Rversion<-NULL
if (!is.null(isTERR[["TERR.version"]])) {
########### [TIBCO] Load RinR library ###################
library(RinR)
########### [TIBCO] Determinate R interpreter location ########
Rversion <- makeREvaluator("R", RHome = "C:/Program Files/R/R-3.4.1")
########### [TIBCO] Get the input variables ############
# path_to_vcf <- "C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\samples\\R_2015_01_27_14_48_49_user_XEN-66-Haloplex_316_Nefro_pool24_124_2305.vcf"
path_to_vcf <- "C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\samples\\NA12878.chr.22.vcf"
path_to_indexed_files <-"C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\test_files\\indexedVCFfiles"
########### [TIBCO] Create the REvaluate object to execute main method ########
locIndexedVCF <- REvaluate({
loc_indexed_VCF <- indexVCFfile(path_to_vcf, path_to_indexed_files)
}
, data = list(indexVCFfile = indexVCFfile, path_to_vcf = path_to_vcf, path_to_indexed_files = path_to_indexed_files)
# , REvaluator = Rversion
# , verbose	= TRUE
)
########### [TIBCO] Convert the instance file to a Blob Object ########
locIndexedVCFBlob <- SObjectToBlob(locIndexedVCF)
} else {
########### [RStudio] Set Working directory ############
setwd("C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk")
########### [RStudio] Get the input variables ############
# path_to_vcf <- "C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\R_2015_01_27_14_48_49_user_XEN-66-Haloplex_316_Nefro_pool24_124_2305.vcf"
path_to_vcf <- "C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\samples\\NA12878.chr.22.vcf"
path_to_indexed_files <-"C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\test_files\\indexedVCFfiles"
########### [RStudio] Execute main method ###########
locIndexedVCF <- indexVCFfile(path_to_vcf, path_to_indexed_files)
########### [RStudio] Print the ouput in a txt file ###########
sink("C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\test_files\\indexedVCFfiles\\locIndexedVCF")
str(locIndexedVCF)
sink()
}
load("~/GitHub/vcf_pk/NA12878.chr.22.RData")
########### [Code] Main method ########
getvcfDataframe <- function(my_vcf) {
############# [CODE] Load libraries ###################
library(GenomicAlignments)
library(VariantAnnotation)
############# [CODE] Extract the VCF ###################
# Extract the VCF as an object type "CollapsedVCF" (VariantAnnotation package)
vcf_extracted <- readVcf(my_vcf, "hg19")
############# [CODE] Extract a GRanges object from the CollapsedVCF ###################
vcfGRanges <- rowRanges(vcf_extracted)
# ############# [TEST] Determinate a sample for testing #########
# # Get a random sample from the GRanges object for testing
# my_sample_num <- sort(sample(length(vcfGRanges), 40))
# vcf_sample <- vcfGRanges[c(my_sample_num)]
#
# # assign the vcf_sample to the main variable (only for testing)
# vcfGRanges <- vcf_sample
############# [CODE] Pass the Formal class GRanges to a data frame ###################
GRangesdf <- data.frame(vcfGRanges)
ranges_start <- start(ranges(vcfGRanges))
ranges_end <- end(ranges(vcfGRanges))
chroms_vec_chr <- as.character(seqnames(vcfGRanges))
# Next to that, remove the "chr" characters in the chromosome vector,
# in order to only maintain the number, then store it in a new vector
string_to_remove <- "chr"
chroms_vec <- gsub(x = chroms_vec_chr, pattern = paste(string_to_remove, collapse = "|"), replacement = "")
############# [CODE] Extract the REFERENCE alleles of the variants ###################
# The REF allele comes from the dataframe
REFal <- as.character(vcfGRanges$REF)
############# [CODE] Extract the ALTERNATE alleles of the variants ###################
# ALT allele is the result of a S4 method
# the data will be extracted directly from vcf_extracted
# as a DNAStringSetList which will be passed to a dataframe
# Then the duplicated value (which display in different rows) will be unificate in an unique row
ALTal_df <- data.frame(vcfGRanges$ALT)
i <- 1
for (boolresult in duplicated(ALTal_df[,1])) {
if (boolresult == TRUE) {
ALTal_df[,3][[i-1]] <- paste(ALTal_df[,3][[i-1]], ALTal_df[,3][[i]], sep=",")
ALTal_df <- ALTal_df[-c(i),]
}
i <- i + 1
}
ALTal <- ALTal_df[3][[1]]
############# [CODE] Extract quality and filter information ##############
qual_vec <- vcfGRanges$QUAL
filter_vec <- vcfGRanges$FILTER
############# [CODE] Build the dataframe with the extracted information ###################
# Build the dataframe
vcfDataframe <- data.frame(chroms_vec, ranges_start, ranges_end, REFal, ALTal, qual_vec, filter_vec)
colnames(vcfDataframe) <- c("chromosome", "start", "end", "reference", "alternate", "quality", "filter")
return(vcfDataframe)
}
########### [Code] Determinate if running in TERR or standard R version #############
isTERR<-R.Version()
Rversion<-NULL
if (!is.null(isTERR[["TERR.version"]])) {
########### [TIBCO] Load RinR library #############
library(RinR)
########### [TIBCO] Determinate R interpreter location ########
Rversion <- makeREvaluator("R", RHome = "C:/Program Files/R/R-3.4.1")
########### [TIBCO] Determinate path of the VCF ##############
# Ask user to introduce the path to the VCF
# PENDING CODE OR TIBCO FUNCTION
my_vcf <- "C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\samples\\NA12878.chr.22.vcf"
########### [TIBCO] Create the REvaluate object ########
vcfDataframe <- REvaluate({
vcfDataframe <- getvcfDataframe(my_vcf)
vcfDataframe
}
,
data = list(getvcfDataframe = getvcfDataframe, my_vcf = my_vcf)
)
} else {
# ############# [RStudio] Set Working directory ############
# Please uncoment the next line changin the working directory by the correct one:
setwd("C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk")
########### [RStudio] Determinate path of the VCF ##############
# Please edit the following code line to put the correct path to your VCF
my_vcf <- "C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\samples\\NA12878.chr.22.vcf"
########### [RStudio] Get the dataframe ########################
vcfDataframe <- getvcfDataframe(my_vcf)
########### [Rstudio] Send the dataframe to a txt file ###################
write.table(vcfDataframe,"test_files\\variants_table.txt",sep="\t",row.names=FALSE)
}
save.image("~/GitHub/vcf_pk/NA12878.chr.22.RData")
########### [Code] Main method ########
getChosenAnnotTable <- function(chosen_annot, annotVariants_table) {
############# [Code] Load libraries #############
# library(RCurl)
library(jsonlite) #
library(dplyr)
# library(tidyr)
############# [Code] Method to process cells containing a dataframe #############
# This function will convert any cell containing a dataframe in readable information
# cell_to_convert <- annot_cell # For TESTING purpose
simplifyDFcell <- function (cell_to_convert) {
print ("Processing a dataframe") # testing line
# Create a new dataframe from the cell
cell_df <- data.frame(cell_to_convert)
# To know what classes are inside the dataframe
class_info <- lapply(cell_df, class)
classes_vec <- as.character(class_info)
# Check if there still is a dataframe inside the new dataframe
if ('data.frame' %in% classes_vec) {
cell_df <- flatten(cell_df)
class_info <- lapply(cell_df, class)
classes_vec <- as.character(class_info)
}
# Check if there is a list inside the new dataframe
i <- 1
for (class in classes_vec) {
if (class == "list") {
cell_df[,i] <- as.character(cell_df[,i])
}
i <- i + 1
}
# The result will be a new row created from the cell
return(cell_df)
}
############# [Code] Main method ############
# Get the index of the chosen annotation
index_annot <- grep(chosen_annot, colnames(annotVariants_table))
# Extract, as a single variable, the chosen annotation from the table
annot_column <- annotVariants_table[,index_annot]
# Declare the basic table
basicTable <- annotVariants_table[,1:5]
# Declare the dataframe that will contain all the info of the chosen annotation
chosen_annot_table <- data.frame()
# Determinate the class of all the cells inside the column
column_classes <- lapply(annot_column, class)
# For each cell of the annotation column, loop to extract the content of the cell
i = 1
for (annot_cell in annot_column) {
# Print info of the cell being analyzed
print (paste("Variant", i, "with class", class(annot_cell), "and lenght:",length(annot_cell)))
print (paste("dimension",(dim(annot_cell))))
# Assign variables to start the analyze
data_class <- class(annot_cell)
data_length <- length(annot_cell)
basic_row <- basicTable[i,]
# print (str(annot_column[i])) # testing line
if (data_length == 0) { # In case the cell would have no result for this annotation
print ("Processing empty cell")
annotated_row <- basic_row
# annotated_row[, chosen_annot] <- "No result"
} else if (data_class == "data.frame") { # In case the cell would contain a dataframe
# Apply the function  to produce a row/df from the cell
annotation_row <- simplifyDFcell(annot_cell)
# Build a row with the chosen annotation of the current variant
# and bind it to basic table
annotated_row <- cbind(basic_row, annotation_row)
} else if (data_class == "list") { # In case the cell would contain a list
annotation_row <- as.character(annot_cell)
# Build a row with the chosen annotation of the current variant
# and bind it to basic table
annotated_row <- cbind(basic_row, annotation_row)
} else {# In case the cell is not problematic
annotation_row <- annot_cell
# Build a row with the chosen annotation of the current variant
# and bind it to basic table
annotated_row <- cbind(basic_row, annotation_row)
}
print ("Building the annotated table") # testing line
chosen_annot_table <- bind_rows(chosen_annot_table, annotated_row)
i = i + 1
print("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++")# testing line
}
return(chosen_annot_table)
}
availableAnnots[14]
########### [Code] Determinate if running in TERR or standard R version #############
isTERR<-R.Version()
Rversion<-NULL
if (!is.null(isTERR[["TERR.version"]])) {
########### [TIBCO] Load RinR library ###################
library(RinR)
########### [TIBCO] Determinate R interpreter location ########
Rversion <- makeREvaluator("R", RHome = "C:/Program Files/R/R-3.4.1")
############ [TIBCO] Load variables ###############
# Load the annotated table, stored in memory as a Blob Object created by script "cellbaseR_Query_getVariant"
annotVCFObject <- BlobToSObject(annotVCFTableBlob)
annotVariants_table <- annotVCFObject
# For testing prupose: you can pre-set the annotation "geneDrugInteraction"
# chosen_annot <- availableAnnots[12]
########### [TIBCO]] [PENDING] Verify if the annotation has not been already loaded ######
########### [TIBCO] Create the REvaluate object ########
AnnotatedTable <- REvaluate({
chosen_annot_table <- getChosenAnnotTable(chosen_annot, annotVariants_table)
chosen_annot_table
},
data = list(getChosenAnnotTable = getChosenAnnotTable, annotVariants_table = annotVCFTable, chosen_annot = chosen_annot)
# ,
# REvaluator = Rversion,
# verbose	= TRUE
)
########### [TIBCO] [PENDING] Save the annotated table as a Blob Object #######
# annotationsBlob <- SObjectToBlob(AnnotatedTable)
# assign(paste(chosen_annot,"Table",sep=""), annotationsBlob)
} else {
########### [RStudio] Set Working directory ############
setwd("C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk")
########### [RStudio] Get the input variables ############
chosen_annot = availableAnnots[14]
# availableAnnots, annotVariants_table
# They should already be loaded in global environment and come from script 3.cellbaseR_Query_getVariant
########### [RStudio] Execute main method ###########
chosen_annot_table <- getChosenAnnotTable(chosen_annot, annotVCFTable)
########### [RStudio] Print the table in a txt file ###########
# Works only with basic table
file_path <- paste("test_files\\annotated_table_",chosen_annot, ".txt",sep = "")
try(write.table(chosen_annot_table,file_path, append = FALSE, sep="\t",row.names=FALSE))
}
warnings()
View(annotVCFTable)
View(chosen_annot_table)
