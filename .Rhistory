# Extract the VCF as an object type "CollapsedVCF" (VariantAnnotation package)
vcf_extracted <- readVcf(my_vcf, "hg19")
############# [CODE] Extract a GRanges object from the CollapsedVCF ###################
vcfGRanges <- rowRanges(vcf_extracted)
# ############# [TEST] Determinate a sample for testing #########
# # Get a random sample from the GRanges object for testing
# my_sample_num <- sort(sample(length(vcfGRanges), 40))
# vcf_sample <- vcfGRanges[c(my_sample_num)]
#
# # assign the vcf_sample to the main variable (only for testing)
# vcfGRanges <- vcf_sample
############# [CODE] Pass the Formal class GRanges to a data frame ###################
GRangesdf <- data.frame(vcfGRanges)
ranges_start <- start(ranges(vcfGRanges))
ranges_end <- end(ranges(vcfGRanges))
chroms_vec_chr <- as.character(seqnames(vcfGRanges))
# Next to that, remove the "chr" characters in the chromosome vector,
# in order to only maintain the number, then store it in a new vector
string_to_remove <- "chr"
chroms_vec <- gsub(x = chroms_vec_chr, pattern = paste(string_to_remove, collapse = "|"), replacement = "")
############# [CODE] Extract the REFERENCE alleles of the variants ###################
# The REF allele comes from the dataframe
REFal <- as.character(vcfGRanges$REF)
############# [CODE] Extract the ALTERNATE alleles of the variants ###################
# ALT allele is the result of a S4 method
# the data will be extracted directly from vcf_extracted
# as a DNAStringSetList which will be passed to a dataframe
ALTal_df <- data.frame(vcfGRanges$ALT)
ALTal <- ALTal_df[3][[1]]
############# [CODE] Build the dataframe with the extracted information ###################
# Build the dataframe
vcfDataframe <- data.frame(chroms_vec, ranges_start, ranges_end, REFal, ALTal)
colnames(vcfDataframe) <- c("Chromosome", "Range start", "Range end", "Ref allele", "Alt allele")
return(vcfDataframe)
}
########### [Code] Determinate if running in TERR or standard R version #############
isTERR<-R.Version()
Rversion<-NULL
if (!is.null(isTERR[["TERR.version"]])) {
########### [TIBCO] Load RinR library #############
library(RinR)
########### [TIBCO] Determinate R interpreter location ########
Rversion <- makeREvaluator("R", RHome = "C:/Program Files/R/R-3.4.1")
########### [TIBCO] Determinate path of the VCF ##############
# Ask user to introduce the path to the VCF
# PENDING CODE OR TIBCO FUNCTION
my_vcf <- "C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\R_2015_01_27_14_48_49_user_XEN-66-Haloplex_316_Nefro_pool24_124_2305.vcf"
########### [TIBCO] Create the REvaluate object ########
vcfDataframe <- REvaluate({
vcfDataframe <- getvcfDataframe(my_vcf)
vcfDataframe
# Error in data.frame(chroms_vec, ranges_start, ranges_end, REFal, ALTal) :
#   arguments imply differing number of rows: 40, 41
}
,
data = list(getvcfDataframe = getvcfDataframe, my_vcf = my_vcf)
)
} else {
# ############# [RStudio] Set Working directory ############
# Please uncoment the next line changin the working directory by the correct one:
setwd("C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk")
########### [RStudio] Determinate path of the VCF ##############
# Please edit the following code line to put the correct path to your VCF
my_vcf <- "C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\R_2015_01_27_14_48_49_user_XEN-66-Haloplex_316_Nefro_pool24_124_2305.vcf"
########### [RStudio] Get the dataframe ########################
vcfDataframe <- getvcfDataframe(my_vcf)
########### [Rstudio] Send the dataframe to a txt file ###################
write.table(vcfDataframe,"test_files\\variants_table.txt",sep="\t",row.names=FALSE)
}
############# [CODE] Extract the VCF ###################
# Extract the VCF as an object type "CollapsedVCF" (VariantAnnotation package)
vcf_extracted <- readVcf(my_vcf, "hg19")
############# [CODE] Extract a GRanges object from the CollapsedVCF ###################
vcfGRanges <- rowRanges(vcf_extracted)
############# [CODE] Pass the Formal class GRanges to a data frame ###################
GRangesdf <- data.frame(vcfGRanges)
ranges_start <- start(ranges(vcfGRanges))
ranges_end <- end(ranges(vcfGRanges))
chroms_vec_chr <- as.character(seqnames(vcfGRanges))
# Next to that, remove the "chr" characters in the chromosome vector,
# in order to only maintain the number, then store it in a new vector
string_to_remove <- "chr"
chroms_vec <- gsub(x = chroms_vec_chr, pattern = paste(string_to_remove, collapse = "|"), replacement = "")
############# [CODE] Extract the REFERENCE alleles of the variants ###################
# The REF allele comes from the dataframe
REFal <- as.character(vcfGRanges$REF)
ALTal_df <- data.frame(vcfGRanges$ALT)
ALTal <- ALTal_df[3][[1]]
ALTal
View(ALTal_df)
scanVcf(vcf_extracted)
data.frame(REFal)
View(data.frame(REFal))
duplicated(ALTal_df[,1])
duplicated(ALTal_df[,1])
i <- 1
for (boolresult in duplicated(ALTal_df[,1])) {
if (boolresult == TRUE) {
print (ALTal_df[,1][[i]])
}
i <- i + 1
}
i <- 1
for (boolresult in duplicated(ALTal_df[,1])) {
if (boolresult == TRUE) {
print (i)
print (ALTal_df[,1][[i]])
}
i <- i + 1
}
ALTal_df_TEST <- ALTal_df
i <- 1
for (boolresult in duplicated(ALTal_df[,1])) {
if (boolresult == TRUE) {
print (i)
print (ALTal_df[,1][[i]])
ALTal_df_TEST[,3][[i-1]] <- c(ALTal_df_TEST[,3][[i-1]], ALTal_df_TEST[,3][[i]])
}
i <- i + 1
}
ALTal_df_TEST[,3][[i-1]]
ALTal_df_TEST[,3][[i-1]]
ALTal_df_TEST[,3][[i]]
c(ALTal_df_TEST[,3][[i-1]], ALTal_df_TEST[,3][[i]])
paste(ALTal_df_TEST[,3][[i-1]], ALTal_df_TEST[,3][[i]])
paste(ALTal_df_TEST[,3][[i-1]], ALTal_df_TEST[,3][[i]], sep=",")
i <- 1
for (boolresult in duplicated(ALTal_df[,1])) {
if (boolresult == TRUE) {
print (i)
print (ALTal_df[,1][[i]])
ALTal_df_TEST[,3][[i-1]] <- paste(ALTal_df_TEST[,3][[i-1]], ALTal_df_TEST[,3][[i]], sep=",")
}
i <- i + 1
}
View(ALTal_df_TEST)
i <- 1
for (boolresult in duplicated(ALTal_df[,1])) {
if (boolresult == TRUE) {
print (i)
print (ALTal_df[,1][[i]])
ALTal_df_TEST[,3][[i-1]] <- paste(ALTal_df_TEST[,3][[i-1]], ALTal_df_TEST[,3][[i]], sep=",")
ALTal_df_TEST <- ALTal_df_TEST[-c(i)]
}
i <- i + 1
}
ALTal_df_TEST <- ALTal_df
i <- 1
for (boolresult in duplicated(ALTal_df[,1])) {
if (boolresult == TRUE) {
print (i)
print (ALTal_df[,1][[i]])
ALTal_df_TEST[,3][[i-1]] <- paste(ALTal_df_TEST[,3][[i-1]], ALTal_df_TEST[,3][[i]], sep=",")
ALTal_df_TEST <- ALTal_df_TEST[-c(i)]
}
i <- i + 1
}
View(ALTal_df_TEST)
ALTal_df_TEST[-c(i)]
ALTal_df_TEST <- ALTal_df
i <- 1
for (boolresult in duplicated(ALTal_df[,1])) {
if (boolresult == TRUE) {
print (i)
print (ALTal_df[,1][[i]])
ALTal_df_TEST[,3][[i-1]] <- paste(ALTal_df_TEST[,3][[i-1]], ALTal_df_TEST[,3][[i]], sep=",")
ALTal_df_TEST <- ALTal_df_TEST[-c(i,)]
}
i <- i + 1
}
i <- 1
ALTal_df_TEST[-c(i),]
ALTal_df_TEST <- ALTal_df
i <- 1
for (boolresult in duplicated(ALTal_df[,1])) {
if (boolresult == TRUE) {
print (i)
print (ALTal_df[,1][[i]])
ALTal_df_TEST[,3][[i-1]] <- paste(ALTal_df_TEST[,3][[i-1]], ALTal_df_TEST[,3][[i]], sep=",")
ALTal_df_TEST <- ALTal_df_TEST[-c(i),]
}
i <- i + 1
}
########### [Code] Main method ########
getvcfDataframe <- function(my_vcf) {
############# [CODE] Load libraries ###################
library(GenomicAlignments)
library(VariantAnnotation)
############# [CODE] Extract the VCF ###################
# Extract the VCF as an object type "CollapsedVCF" (VariantAnnotation package)
vcf_extracted <- readVcf(my_vcf, "hg19")
############# [CODE] Extract a GRanges object from the CollapsedVCF ###################
vcfGRanges <- rowRanges(vcf_extracted)
# ############# [TEST] Determinate a sample for testing #########
# # Get a random sample from the GRanges object for testing
# my_sample_num <- sort(sample(length(vcfGRanges), 40))
# vcf_sample <- vcfGRanges[c(my_sample_num)]
#
# # assign the vcf_sample to the main variable (only for testing)
# vcfGRanges <- vcf_sample
############# [CODE] Pass the Formal class GRanges to a data frame ###################
GRangesdf <- data.frame(vcfGRanges)
ranges_start <- start(ranges(vcfGRanges))
ranges_end <- end(ranges(vcfGRanges))
chroms_vec_chr <- as.character(seqnames(vcfGRanges))
# Next to that, remove the "chr" characters in the chromosome vector,
# in order to only maintain the number, then store it in a new vector
string_to_remove <- "chr"
chroms_vec <- gsub(x = chroms_vec_chr, pattern = paste(string_to_remove, collapse = "|"), replacement = "")
############# [CODE] Extract the REFERENCE alleles of the variants ###################
# The REF allele comes from the dataframe
REFal <- as.character(vcfGRanges$REF)
############# [CODE] Extract the ALTERNATE alleles of the variants ###################
# ALT allele is the result of a S4 method
# the data will be extracted directly from vcf_extracted
# as a DNAStringSetList which will be passed to a dataframe
# Then the duplicated value (which display in different rows) will be unificate in an unique row
ALTal_df <- data.frame(vcfGRanges$ALT)
i <- 1
for (boolresult in duplicated(ALTal_df[,1])) {
if (boolresult == TRUE) {
ALTal_df[,3][[i-1]] <- paste(ALTal_df_TEST[,3][[i-1]], ALTal_df_TEST[,3][[i]], sep=",")
ALTal_df <- ALTal_df_TEST[-c(i),]
}
i <- i + 1
}
ALTal <- ALTal_df[3][[1]]
############# [CODE] Build the dataframe with the extracted information ###################
# Build the dataframe
vcfDataframe <- data.frame(chroms_vec, ranges_start, ranges_end, REFal, ALTal)
colnames(vcfDataframe) <- c("Chromosome", "Range start", "Range end", "Ref allele", "Alt allele")
return(vcfDataframe)
}
########### [Code] Determinate if running in TERR or standard R version #############
isTERR<-R.Version()
Rversion<-NULL
if (!is.null(isTERR[["TERR.version"]])) {
########### [TIBCO] Load RinR library #############
library(RinR)
########### [TIBCO] Determinate R interpreter location ########
Rversion <- makeREvaluator("R", RHome = "C:/Program Files/R/R-3.4.1")
########### [TIBCO] Determinate path of the VCF ##############
# Ask user to introduce the path to the VCF
# PENDING CODE OR TIBCO FUNCTION
my_vcf <- "C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\R_2015_01_27_14_48_49_user_XEN-66-Haloplex_316_Nefro_pool24_124_2305.vcf"
########### [TIBCO] Create the REvaluate object ########
vcfDataframe <- REvaluate({
vcfDataframe <- getvcfDataframe(my_vcf)
vcfDataframe
}
,
data = list(getvcfDataframe = getvcfDataframe, my_vcf = my_vcf)
)
} else {
# ############# [RStudio] Set Working directory ############
# Please uncoment the next line changin the working directory by the correct one:
setwd("C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk")
########### [RStudio] Determinate path of the VCF ##############
# Please edit the following code line to put the correct path to your VCF
my_vcf <- "C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\R_2015_01_27_14_48_49_user_XEN-66-Haloplex_316_Nefro_pool24_124_2305.vcf"
########### [RStudio] Get the dataframe ########################
vcfDataframe <- getvcfDataframe(my_vcf)
########### [Rstudio] Send the dataframe to a txt file ###################
write.table(vcfDataframe,"test_files\\variants_table.txt",sep="\t",row.names=FALSE)
}
########### [Code] Main method ########
getvcfDataframe <- function(my_vcf) {
############# [CODE] Load libraries ###################
library(GenomicAlignments)
library(VariantAnnotation)
############# [CODE] Extract the VCF ###################
# Extract the VCF as an object type "CollapsedVCF" (VariantAnnotation package)
vcf_extracted <- readVcf(my_vcf, "hg19")
############# [CODE] Extract a GRanges object from the CollapsedVCF ###################
vcfGRanges <- rowRanges(vcf_extracted)
# ############# [TEST] Determinate a sample for testing #########
# # Get a random sample from the GRanges object for testing
# my_sample_num <- sort(sample(length(vcfGRanges), 40))
# vcf_sample <- vcfGRanges[c(my_sample_num)]
#
# # assign the vcf_sample to the main variable (only for testing)
# vcfGRanges <- vcf_sample
############# [CODE] Pass the Formal class GRanges to a data frame ###################
GRangesdf <- data.frame(vcfGRanges)
ranges_start <- start(ranges(vcfGRanges))
ranges_end <- end(ranges(vcfGRanges))
chroms_vec_chr <- as.character(seqnames(vcfGRanges))
# Next to that, remove the "chr" characters in the chromosome vector,
# in order to only maintain the number, then store it in a new vector
string_to_remove <- "chr"
chroms_vec <- gsub(x = chroms_vec_chr, pattern = paste(string_to_remove, collapse = "|"), replacement = "")
############# [CODE] Extract the REFERENCE alleles of the variants ###################
# The REF allele comes from the dataframe
REFal <- as.character(vcfGRanges$REF)
############# [CODE] Extract the ALTERNATE alleles of the variants ###################
# ALT allele is the result of a S4 method
# the data will be extracted directly from vcf_extracted
# as a DNAStringSetList which will be passed to a dataframe
# Then the duplicated value (which display in different rows) will be unificate in an unique row
ALTal_df <- data.frame(vcfGRanges$ALT)
i <- 1
for (boolresult in duplicated(ALTal_df[,1])) {
if (boolresult == TRUE) {
ALTal_df[,3][[i-1]] <- paste(ALTal_df_TEST[,3][[i-1]], ALTal_df_TEST[,3][[i]], sep=",")
ALTal_df <- ALTal_df_TEST[-c(i),]
}
i <- i + 1
}
ALTal <- ALTal_df[3][[1]]
############# [CODE] Build the dataframe with the extracted information ###################
# Build the dataframe
vcfDataframe <- data.frame(chroms_vec, ranges_start, ranges_end, REFal, ALTal)
colnames(vcfDataframe) <- c("Chromosome", "Range start", "Range end", "Ref allele", "Alt allele")
return(vcfDataframe)
}
########### [Code] Determinate if running in TERR or standard R version #############
isTERR<-R.Version()
Rversion<-NULL
if (!is.null(isTERR[["TERR.version"]])) {
########### [TIBCO] Load RinR library #############
library(RinR)
########### [TIBCO] Determinate R interpreter location ########
Rversion <- makeREvaluator("R", RHome = "C:/Program Files/R/R-3.4.1")
########### [TIBCO] Determinate path of the VCF ##############
# Ask user to introduce the path to the VCF
# PENDING CODE OR TIBCO FUNCTION
my_vcf <- "C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\R_2015_01_27_14_48_49_user_XEN-66-Haloplex_316_Nefro_pool24_124_2305.vcf"
########### [TIBCO] Create the REvaluate object ########
vcfDataframe <- REvaluate({
vcfDataframe <- getvcfDataframe(my_vcf)
vcfDataframe
}
,
data = list(getvcfDataframe = getvcfDataframe, my_vcf = my_vcf)
)
} else {
# ############# [RStudio] Set Working directory ############
# Please uncoment the next line changin the working directory by the correct one:
setwd("C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk")
########### [RStudio] Determinate path of the VCF ##############
# Please edit the following code line to put the correct path to your VCF
my_vcf <- "C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\R_2015_01_27_14_48_49_user_XEN-66-Haloplex_316_Nefro_pool24_124_2305.vcf"
########### [RStudio] Get the dataframe ########################
vcfDataframe <- getvcfDataframe(my_vcf)
########### [Rstudio] Send the dataframe to a txt file ###################
write.table(vcfDataframe,"test_files\\variants_table.txt",sep="\t",row.names=FALSE)
}
########### [Code] Main method ########
getvcfDataframe <- function(my_vcf) {
############# [CODE] Load libraries ###################
library(GenomicAlignments)
library(VariantAnnotation)
############# [CODE] Extract the VCF ###################
# Extract the VCF as an object type "CollapsedVCF" (VariantAnnotation package)
vcf_extracted <- readVcf(my_vcf, "hg19")
############# [CODE] Extract a GRanges object from the CollapsedVCF ###################
vcfGRanges <- rowRanges(vcf_extracted)
# ############# [TEST] Determinate a sample for testing #########
# # Get a random sample from the GRanges object for testing
# my_sample_num <- sort(sample(length(vcfGRanges), 40))
# vcf_sample <- vcfGRanges[c(my_sample_num)]
#
# # assign the vcf_sample to the main variable (only for testing)
# vcfGRanges <- vcf_sample
############# [CODE] Pass the Formal class GRanges to a data frame ###################
GRangesdf <- data.frame(vcfGRanges)
ranges_start <- start(ranges(vcfGRanges))
ranges_end <- end(ranges(vcfGRanges))
chroms_vec_chr <- as.character(seqnames(vcfGRanges))
# Next to that, remove the "chr" characters in the chromosome vector,
# in order to only maintain the number, then store it in a new vector
string_to_remove <- "chr"
chroms_vec <- gsub(x = chroms_vec_chr, pattern = paste(string_to_remove, collapse = "|"), replacement = "")
############# [CODE] Extract the REFERENCE alleles of the variants ###################
# The REF allele comes from the dataframe
REFal <- as.character(vcfGRanges$REF)
############# [CODE] Extract the ALTERNATE alleles of the variants ###################
# ALT allele is the result of a S4 method
# the data will be extracted directly from vcf_extracted
# as a DNAStringSetList which will be passed to a dataframe
# Then the duplicated value (which display in different rows) will be unificate in an unique row
ALTal_df <- data.frame(vcfGRanges$ALT)
i <- 1
for (boolresult in duplicated(ALTal_df[,1])) {
if (boolresult == TRUE) {
ALTal_df[,3][[i-1]] <- paste(ALTal_df[,3][[i-1]], ALTal_df[,3][[i]], sep=",")
ALTal_df <- ALTal_df_TEST[-c(i),]
}
i <- i + 1
}
ALTal <- ALTal_df[3][[1]]
############# [CODE] Build the dataframe with the extracted information ###################
# Build the dataframe
vcfDataframe <- data.frame(chroms_vec, ranges_start, ranges_end, REFal, ALTal)
colnames(vcfDataframe) <- c("Chromosome", "Range start", "Range end", "Ref allele", "Alt allele")
return(vcfDataframe)
}
########### [Code] Determinate if running in TERR or standard R version #############
isTERR<-R.Version()
Rversion<-NULL
if (!is.null(isTERR[["TERR.version"]])) {
########### [TIBCO] Load RinR library #############
library(RinR)
########### [TIBCO] Determinate R interpreter location ########
Rversion <- makeREvaluator("R", RHome = "C:/Program Files/R/R-3.4.1")
########### [TIBCO] Determinate path of the VCF ##############
# Ask user to introduce the path to the VCF
# PENDING CODE OR TIBCO FUNCTION
my_vcf <- "C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\R_2015_01_27_14_48_49_user_XEN-66-Haloplex_316_Nefro_pool24_124_2305.vcf"
########### [TIBCO] Create the REvaluate object ########
vcfDataframe <- REvaluate({
vcfDataframe <- getvcfDataframe(my_vcf)
vcfDataframe
}
,
data = list(getvcfDataframe = getvcfDataframe, my_vcf = my_vcf)
)
} else {
# ############# [RStudio] Set Working directory ############
# Please uncoment the next line changin the working directory by the correct one:
setwd("C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk")
########### [RStudio] Determinate path of the VCF ##############
# Please edit the following code line to put the correct path to your VCF
my_vcf <- "C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\R_2015_01_27_14_48_49_user_XEN-66-Haloplex_316_Nefro_pool24_124_2305.vcf"
########### [RStudio] Get the dataframe ########################
vcfDataframe <- getvcfDataframe(my_vcf)
########### [Rstudio] Send the dataframe to a txt file ###################
write.table(vcfDataframe,"test_files\\variants_table.txt",sep="\t",row.names=FALSE)
}
########### [Code] Main method ########
getvcfDataframe <- function(my_vcf) {
############# [CODE] Load libraries ###################
library(GenomicAlignments)
library(VariantAnnotation)
############# [CODE] Extract the VCF ###################
# Extract the VCF as an object type "CollapsedVCF" (VariantAnnotation package)
vcf_extracted <- readVcf(my_vcf, "hg19")
############# [CODE] Extract a GRanges object from the CollapsedVCF ###################
vcfGRanges <- rowRanges(vcf_extracted)
# ############# [TEST] Determinate a sample for testing #########
# # Get a random sample from the GRanges object for testing
# my_sample_num <- sort(sample(length(vcfGRanges), 40))
# vcf_sample <- vcfGRanges[c(my_sample_num)]
#
# # assign the vcf_sample to the main variable (only for testing)
# vcfGRanges <- vcf_sample
############# [CODE] Pass the Formal class GRanges to a data frame ###################
GRangesdf <- data.frame(vcfGRanges)
ranges_start <- start(ranges(vcfGRanges))
ranges_end <- end(ranges(vcfGRanges))
chroms_vec_chr <- as.character(seqnames(vcfGRanges))
# Next to that, remove the "chr" characters in the chromosome vector,
# in order to only maintain the number, then store it in a new vector
string_to_remove <- "chr"
chroms_vec <- gsub(x = chroms_vec_chr, pattern = paste(string_to_remove, collapse = "|"), replacement = "")
############# [CODE] Extract the REFERENCE alleles of the variants ###################
# The REF allele comes from the dataframe
REFal <- as.character(vcfGRanges$REF)
############# [CODE] Extract the ALTERNATE alleles of the variants ###################
# ALT allele is the result of a S4 method
# the data will be extracted directly from vcf_extracted
# as a DNAStringSetList which will be passed to a dataframe
# Then the duplicated value (which display in different rows) will be unificate in an unique row
ALTal_df <- data.frame(vcfGRanges$ALT)
i <- 1
for (boolresult in duplicated(ALTal_df[,1])) {
if (boolresult == TRUE) {
ALTal_df[,3][[i-1]] <- paste(ALTal_df[,3][[i-1]], ALTal_df[,3][[i]], sep=",")
ALTal_df <- ALTal_df[-c(i),]
}
i <- i + 1
}
ALTal <- ALTal_df[3][[1]]
############# [CODE] Build the dataframe with the extracted information ###################
# Build the dataframe
vcfDataframe <- data.frame(chroms_vec, ranges_start, ranges_end, REFal, ALTal)
colnames(vcfDataframe) <- c("Chromosome", "Range start", "Range end", "Ref allele", "Alt allele")
return(vcfDataframe)
}
########### [Code] Determinate if running in TERR or standard R version #############
isTERR<-R.Version()
Rversion<-NULL
if (!is.null(isTERR[["TERR.version"]])) {
########### [TIBCO] Load RinR library #############
library(RinR)
########### [TIBCO] Determinate R interpreter location ########
Rversion <- makeREvaluator("R", RHome = "C:/Program Files/R/R-3.4.1")
########### [TIBCO] Determinate path of the VCF ##############
# Ask user to introduce the path to the VCF
# PENDING CODE OR TIBCO FUNCTION
my_vcf <- "C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\R_2015_01_27_14_48_49_user_XEN-66-Haloplex_316_Nefro_pool24_124_2305.vcf"
########### [TIBCO] Create the REvaluate object ########
vcfDataframe <- REvaluate({
vcfDataframe <- getvcfDataframe(my_vcf)
vcfDataframe
}
,
data = list(getvcfDataframe = getvcfDataframe, my_vcf = my_vcf)
)
} else {
# ############# [RStudio] Set Working directory ############
# Please uncoment the next line changin the working directory by the correct one:
setwd("C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk")
########### [RStudio] Determinate path of the VCF ##############
# Please edit the following code line to put the correct path to your VCF
my_vcf <- "C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\R_2015_01_27_14_48_49_user_XEN-66-Haloplex_316_Nefro_pool24_124_2305.vcf"
########### [RStudio] Get the dataframe ########################
vcfDataframe <- getvcfDataframe(my_vcf)
########### [Rstudio] Send the dataframe to a txt file ###################
write.table(vcfDataframe,"test_files\\variants_table.txt",sep="\t",row.names=FALSE)
}
View(vcfDataframe)
