annotVariant_sub <- annotVariant
# Scan the data.frame in order to find the problematic column(s)
print (paste("Analyzing columns of variant", i)) # testing line
k = 1
for (column in annotVariant) {
# extract class and dimension of the problematic column
the_class <- class(column)
the_dim <- dim(column)
if (length(the_dim) != 0){ # only for columns with problem
print (paste("Column", k, "has a dimensional problem.")) # testing line
# Remove the problematic column, split it and add it again to the dataframe
annotVariant_sub <- cbind(annotVariant[,-k], column[1], column[2])
# To record variants with dimensional problem
variant = i
column = k
class = the_class
dimension = the_dim
one_problem <- data.frame(variant, column, dimension, class)
problems <- bind_rows(problems, one_problem)
}
k = k + 1
}
# end of testing block 2
annotVariants_table <- bind_rows(annotVariants_table, annotVariant_sub)
}
}
# warnings()
}
library(RCurl)
library(jsonlite)
library(cellbaseR)
library(dplyr)
library(tidyr)
var_number <- nrow(variants_table)
cb <- CellBaseR()
annotVariants_table <- data.frame()
problems <- data.frame(variant=integer(0), column=integer(0), dimension=integer(0), class=character(0)) # testing line
for (i in 1:var_number) {
print (paste("Processing variant number:", i)) # this line is for testing
# extract the chromosome
var_chrom <- variants_table[i,1]
# extract the range
var_range <- variants_table[i,2]
# extract the ref and alt alleles
# WARNING: you could have more than one allele in each field
# so that this formula extract only the first one to do the annotation call
# IS THAT A GOOD APPROACH ?
var_refAl <- substring((variants_table[i,4]), 1, 1)
var_altAl <- substring((variants_table[i,5]), 1, 1)
# Get variant cellbase info with cellbaseR package
# the call will return as a data.frame
variant <- paste(var_chrom, ":", var_range, ":", var_refAl, ":", var_altAl, sep = "")
annotVariant <- getVariant(object=cb, ids=variant, resource="annotation")
# set the vector of column dimension to 0
# This is important to control calls that return data.frame with dimension problems
columns_dim <- integer()
if (nrow(annotVariant)==0) { # if the call returns an empty data.frame
print (paste("WARNING for variant", i, "EMPTY RESULT!"))
# build the data.frame with the available information
annotVariant <- data.frame(var_chrom, as.integer(var_range), var_refAl, var_altAl)
colnames(annotVariant) <- c("chromosome", "start", "reference", "alternate")
annotVariants_table <- bind_rows(annotVariants_table, annotVariant)
} else {
# control the dimension of each column in the dataframe
for (column in annotVariant) {
columns_dim <- c(columns_dim, dim(column))
}
# normal situation, no column with dimension > 1
if (length(columns_dim) == 0) {
annotVariants_table <- bind_rows(annotVariants_table, annotVariant)
} else {
# anormal situation, there is one or more columns with dimension > 0
print (paste("WARNING for variant", i, "MULTIDIMENSIONAL column(s)"))
# assign the data.frame to a new variable
annotVariant_sub <- annotVariant
# Scan the data.frame in order to find the problematic column(s)
print (paste("Analyzing columns of variant", i)) # testing line
k = 1
for (column in annotVariant) {
# extract class and dimension of the problematic column
the_class <- class(column)
the_dim <- dim(column)
if (length(the_dim) != 0){ # only for columns with problem
print (paste("Column", k, "has a dimensional problem.")) # testing line
# Remove the problematic column, split it and add it again to the dataframe
annotVariant_sub <- cbind(annotVariant[,-k], column[1], column[2])
# To record variants with dimensional problem
variant = i
column = k
class = the_class
dimension = the_dim
one_problem <- data.frame(variant, column, dimension, class)
problems <- bind_rows(problems, one_problem)
}
k = k + 1
}
# end of testing block 2
annotVariants_table <- bind_rows(annotVariants_table, annotVariant_sub)
}
}
# warnings()
}
basicTable <- annotVariants_table[,1:5]
availableAnnots <- colnames(annotVariants_table)
chosen_annot <- availableAnnots[12]
verifyCellClasses <- function (row_to_verify) {
classes_vector <- character()
list_index <- numeric()
df_index <- numeric()
i <- 1
for (any_cell in row_to_verify) {
cell_class <- class(any_cell)
if (cell_class == "list") {
list_index <- c(list_index,i)
} else if (cell_class == "data.frame") {
df_index <- c(df_index,i)
}
classes_vector <- c(classes_vector, cell_class)
i <- i + 1
}
classes_info <- list(cells_with_list = list_index, cells_with_dataframe = df_index, classes_vector = classes_vector)
return(classes_info)
}
simplifyLISTcell <- function (cell_to_convert) {
print ("Processing a list") # testing line
# Unlist the list. This will create a vector
# This vector is supposed to be included in dataframes as a factor
cell_unlisted <- unlist(cell_to_convert)
# Convert the cell in a usefull format
# complete_row <- data.frame(cell_unlisted) # not in use
complete_row <- cell_unlisted
# The result will be a new row created from the cell
return(complete_row)
}
simplifyDFcell <- function (cell_to_convert) {
print ("Processing a dataframe") # testing line
# Create a new dataframe from the cell
cell_df <- data.frame(cell_to_convert)
# To know what classes are inside the dataframe
# Create a vector of classes from one of the row
class_info <- verifyCellClasses(cell_df[1,])
for (index in class_info$cells_with_list) {
cell_df[,index] <- as.character(cell_df[,index])
}
complete_row <- cell_df
# The result will be a new row created from the cell
return(complete_row)
}
annotVariants_table_cl <- lapply(annotVariants_table, class) # May be unnecessary
annot_column <- annotVariants_table[[paste(chosen_annot)]]
index_annot <- grep(chosen_annot, colnames(annotVariants_table))
chosen_annot_table <- data.frame()
View(annotVariants_table)
availableAnnots
chosen_annot <- availableAnnots[6]
annot_column <- annotVariants_table[[paste(chosen_annot)]]
index_annot <- grep(chosen_annot, colnames(annotVariants_table))
column_class <- class(annot_column[[1]])
column_class
lapply(annotVariants_table[1,], class)
chosen_annot <- availableAnnots[12]
annotVariants_table_cl <- lapply(annotVariants_table, class) # May be unnecessary
annot_column <- annotVariants_table[[paste(chosen_annot)]]
index_annot <- grep(chosen_annot, colnames(annotVariants_table))
chosen_annot_table <- data.frame()
column_class <- class(annot_column[[1]])
column_class
chosen_annot <- availableAnnots[13]
annotVariants_table_cl <- lapply(annotVariants_table, class) # May be unnecessary
annot_column <- annotVariants_table[[paste(chosen_annot)]]
index_annot <- grep(chosen_annot, colnames(annotVariants_table))
chosen_annot_table <- data.frame()
column_class <- class(annot_column[[1]])
column_class
annotVariants_tableBIS <- annotVariants_table
annotVariants_table[[paste(chosen_annot)]]
annotVariants_tableBIS[[paste(chosen_annot)]] <- annotVariants_table
annotVariants_tableBIS[[paste(chosen_annot)]] <- annotVariants_table
annotVariants_tableBIS <- annotVariants_table
annotVariants_tableBIS[[paste(chosen_annot)]]
class(annotVariants_tableBIS[[paste(chosen_annot)]])
annotVariants_tableBIS[index_annot]
annotVariants_tableBIS[index_annot] <-
class(annotVariants_tableBIS[index_annot])
class(annotVariants_tableBIS[index_annot])
annotVariants_table_cl <- lapply(annotVariants_table, class) # May be unnecessary
annotVariants_table_cl
annot_column <- annotVariants_table[,index_annot]
class(annotVariants_tableBIS[,index_annot])
column_class
column_class <- class(annot_column)
column_class
annotVariants_tableBIS <- annotVariants_table
chosen_annot <- availableAnnots[13]
index_annot <- grep(chosen_annot, colnames(annotVariants_table))
annotVariants_table_cl <- lapply(annotVariants_table, class) # May be unnecessary
annot_column <- annotVariants_table[[paste(chosen_annot)]]
annot_column
annotVariants_table_cl
column_class <- class(annot_column[[3]])
column_class
column_class <- lapply(annot_column, class)
column_class
cell_to_convert <- annotVariants_table[1,13]
cell_df <- data.frame(cell_to_convert)
class_info <- lapply(cell_df, class)
class_info
cell_df
cell_to_convert <- annotVariants_table[1,13]
cell_to_convert
cell_to_convert <- annotVariants_table[3,13]
cell_to_convert
cell_df <- data.frame(cell_to_convert)
class_info <- lapply(cell_df, class)
class_info
cell_to_convert <- annotVariants_table[1,12]
cell_df <- data.frame(cell_to_convert)
class_info <- lapply(cell_df, class)
class_info
class(class_info)
classes_vec <- as.character(class_info)
classes_vec
simplifyDFcell <- function (cell_to_convert) {
print ("Processing a dataframe") # testing line
# Create a new dataframe from the cell
cell_df <- data.frame(cell_to_convert)
# To know what classes are inside the dataframe
class_info <- lapply(cell_df, class)
classes_vec <- as.character(class_info)
i <- 1
for (class in classes_vec) {
if (class == "list") {
cell_df[,i] <- as.character(cell_df[,i])
}
}
# The result will be a new row created from the cell
return(cell_df)
}
annotVariants_tableBIS <- annotVariants_table # TESTING !!
chosen_annot <- availableAnnots[13]
index_annot <- grep(chosen_annot, colnames(annotVariants_table))
annotVariants_table_cl <- lapply(annotVariants_table, class) # May be unnecessary
annot_column <- annotVariants_table[[paste(chosen_annot)]]
annot_column <- annotVariants_table[,index_annot]
chosen_annot_table <- data.frame()
column_classes <- lapply(annot_column, class)
i = 1
for (annot_cell in annot_column) {
# Print info of the cell being analyzed
print (paste("Variant", i, "with class", class(annot_cell), "and lenght:",length(annot_cell)))
print (paste("dimension",(dim(annot_cell))))
# Assign variables to start the analyze
data_class <- class(annot_cell)
data_length <- length(annot_cell)
basic_row <- basicTable[i,]
# print (str(annot_column[i])) # testing line
if (data_length == 0) { # In case the cell would have no result for this annotation
print ("Processing empty cell")
annotated_row <- basic_row
# annotated_row[, chosen_annot] <- "No result"
} else if (data_class == "data.frame") { # In case the cell would contain a dataframe
# Apply the function  to produce a row/df from the cell
annotation_row <- simplifyDFcell(annot_cell)
# Build a row with the chosen annotation of the current variant
# and bind it to basic table
annotated_row <- cbind(basic_row, annotation_row)
} else if (data_class == "list") { # In case the cell would contain a list
annotation_row <- as.character(annot_cell)
# Build a row with the chosen annotation of the current variant
# and bind it to basic table
annotated_row <- cbind(basic_row, annotation_row)
} else {# In case the cell is not problematic
annotation_row <- annot_cell
# Build a row with the chosen annotation of the current variant
# and bind it to basic table
annotated_row <- cbind(basic_row, annotation_row)
}
print ("Building the annotated table") # testing line
chosen_annot_table <- bind_rows(chosen_annot_table, annotated_row)
i = i + 1
print("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++")# testing line
}
View(chosen_annot_table)
TEST_classes <- lapply(chosen_annot_table, class)
TEST_classes
chosen_annot <- availableAnnots[12]
index_annot <- grep(chosen_annot, colnames(annotVariants_table))
annotVariants_table_cl <- lapply(annotVariants_table, class) # May be unnecessary
annot_column <- annotVariants_table[[paste(chosen_annot)]]
annot_column <- annotVariants_table[,index_annot]
chosen_annot_table <- data.frame()
column_classes <- lapply(annot_column, class)
i = 1
for (annot_cell in annot_column) {
# Print info of the cell being analyzed
print (paste("Variant", i, "with class", class(annot_cell), "and lenght:",length(annot_cell)))
print (paste("dimension",(dim(annot_cell))))
# Assign variables to start the analyze
data_class <- class(annot_cell)
data_length <- length(annot_cell)
basic_row <- basicTable[i,]
# print (str(annot_column[i])) # testing line
if (data_length == 0) { # In case the cell would have no result for this annotation
print ("Processing empty cell")
annotated_row <- basic_row
# annotated_row[, chosen_annot] <- "No result"
} else if (data_class == "data.frame") { # In case the cell would contain a dataframe
# Apply the function  to produce a row/df from the cell
annotation_row <- simplifyDFcell(annot_cell)
# Build a row with the chosen annotation of the current variant
# and bind it to basic table
annotated_row <- cbind(basic_row, annotation_row)
} else if (data_class == "list") { # In case the cell would contain a list
annotation_row <- as.character(annot_cell)
# Build a row with the chosen annotation of the current variant
# and bind it to basic table
annotated_row <- cbind(basic_row, annotation_row)
} else {# In case the cell is not problematic
annotation_row <- annot_cell
# Build a row with the chosen annotation of the current variant
# and bind it to basic table
annotated_row <- cbind(basic_row, annotation_row)
}
print ("Building the annotated table") # testing line
chosen_annot_table <- bind_rows(chosen_annot_table, annotated_row)
i = i + 1
print("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++")# testing line
}
TEST_classes <- lapply(chosen_annot_table, class)
TEST_classes
column_classes
cell_to_convert <- annotVariants_table[1,12]
cell_df <- data.frame(cell_to_convert)
View(cell_df)
class_info <- lapply(cell_df, class)
class_info
classes_vec <- as.character(class_info)
classes_vec
i <- 1
cell_dfBIS <- cell_df
for (class in classes_vec) {
if (class == "list") {
cell_dfBIS[,i] <- as.character(cell_df[,i])
print (i)
print(class(cell_dfBIS[,i]))
}
}
cell_dfBIS <- cell_df
for (class in classes_vec) {
if (class == "list") {
cell_dfBIS[,i] <- as.character(cell_df[,i])
print (i)
print(class(cell_dfBIS[,i]))
}
i <- i + 1
}
simplifyDFcell <- function (cell_to_convert) {
print ("Processing a dataframe") # testing line
# Create a new dataframe from the cell
cell_df <- data.frame(cell_to_convert)
cell_dfBIS <- cell_df
# To know what classes are inside the dataframe
class_info <- lapply(cell_df, class)
classes_vec <- as.character(class_info)
i <- 1
for (class in classes_vec) {
if (class == "list") {
cell_df[,i] <- as.character(cell_df[,i])
}
i <- i + 1
}
# The result will be a new row created from the cell
return(cell_df)
}
annotVariants_tableBIS <- annotVariants_table # TESTING !!
chosen_annot <- availableAnnots[12]
index_annot <- grep(chosen_annot, colnames(annotVariants_table))
annotVariants_table_cl <- lapply(annotVariants_table, class) # May be unnecessary
annot_column <- annotVariants_table[[paste(chosen_annot)]]
annot_column <- annotVariants_table[,index_annot]
chosen_annot_table <- data.frame()
column_classes <- lapply(annot_column, class)
i = 1
simplifyDFcell <- function (cell_to_convert) {
print ("Processing a dataframe") # testing line
# Create a new dataframe from the cell
cell_df <- data.frame(cell_to_convert)
cell_dfBIS <- cell_df
# To know what classes are inside the dataframe
class_info <- lapply(cell_df, class)
classes_vec <- as.character(class_info)
i <- 1
for (class in classes_vec) {
if (class == "list") {
cell_df[,i] <- as.character(cell_df[,i])
}
i <- i + 1
}
# The result will be a new row created from the cell
return(cell_df)
}
annotVariants_tableBIS <- annotVariants_table # TESTING !!
chosen_annot <- availableAnnots[12]
index_annot <- grep(chosen_annot, colnames(annotVariants_table))
annotVariants_table_cl <- lapply(annotVariants_table, class) # May be unnecessary
annot_column <- annotVariants_table[[paste(chosen_annot)]]
annot_column <- annotVariants_table[,index_annot]
chosen_annot_table <- data.frame()
column_classes <- lapply(annot_column, class)
i = 1
for (annot_cell in annot_column) {
# Print info of the cell being analyzed
print (paste("Variant", i, "with class", class(annot_cell), "and lenght:",length(annot_cell)))
print (paste("dimension",(dim(annot_cell))))
# Assign variables to start the analyze
data_class <- class(annot_cell)
data_length <- length(annot_cell)
basic_row <- basicTable[i,]
# print (str(annot_column[i])) # testing line
if (data_length == 0) { # In case the cell would have no result for this annotation
print ("Processing empty cell")
annotated_row <- basic_row
# annotated_row[, chosen_annot] <- "No result"
} else if (data_class == "data.frame") { # In case the cell would contain a dataframe
# Apply the function  to produce a row/df from the cell
annotation_row <- simplifyDFcell(annot_cell)
# Build a row with the chosen annotation of the current variant
# and bind it to basic table
annotated_row <- cbind(basic_row, annotation_row)
} else if (data_class == "list") { # In case the cell would contain a list
annotation_row <- as.character(annot_cell)
# Build a row with the chosen annotation of the current variant
# and bind it to basic table
annotated_row <- cbind(basic_row, annotation_row)
} else {# In case the cell is not problematic
annotation_row <- annot_cell
# Build a row with the chosen annotation of the current variant
# and bind it to basic table
annotated_row <- cbind(basic_row, annotation_row)
}
print ("Building the annotated table") # testing line
chosen_annot_table <- bind_rows(chosen_annot_table, annotated_row)
i = i + 1
print("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++")# testing line
}
TEST_classes <- lapply(chosen_annot_table, class)
TEST_classes
View(chosen_annot_table)
View(chosen_annot_table)
availableAnnots
chosen_annot <- availableAnnots[8]
index_annot <- grep(chosen_annot, colnames(annotVariants_table))
annot_column <- annotVariants_table[,index_annot]
chosen_annot_table <- data.frame()
column_classes <- lapply(annot_column, class)
i = 1
for (annot_cell in annot_column) {
# Print info of the cell being analyzed
print (paste("Variant", i, "with class", class(annot_cell), "and lenght:",length(annot_cell)))
print (paste("dimension",(dim(annot_cell))))
# Assign variables to start the analyze
data_class <- class(annot_cell)
data_length <- length(annot_cell)
basic_row <- basicTable[i,]
# print (str(annot_column[i])) # testing line
if (data_length == 0) { # In case the cell would have no result for this annotation
print ("Processing empty cell")
annotated_row <- basic_row
# annotated_row[, chosen_annot] <- "No result"
} else if (data_class == "data.frame") { # In case the cell would contain a dataframe
# Apply the function  to produce a row/df from the cell
annotation_row <- simplifyDFcell(annot_cell)
# Build a row with the chosen annotation of the current variant
# and bind it to basic table
annotated_row <- cbind(basic_row, annotation_row)
} else if (data_class == "list") { # In case the cell would contain a list
annotation_row <- as.character(annot_cell)
# Build a row with the chosen annotation of the current variant
# and bind it to basic table
annotated_row <- cbind(basic_row, annotation_row)
} else {# In case the cell is not problematic
annotation_row <- annot_cell
# Build a row with the chosen annotation of the current variant
# and bind it to basic table
annotated_row <- cbind(basic_row, annotation_row)
}
print ("Building the annotated table") # testing line
chosen_annot_table <- bind_rows(chosen_annot_table, annotated_row)
i = i + 1
print("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++")# testing line
}
View(chosen_annot_table)
TEST_classes <- lapply(chosen_annot_table, class)
TEST_classes
annot_column[3]
class(annot_column[3])
class(annot_column[3][1])
View(annot_column[3])
annot_cell
data_class
annot_column[2]
class(annot_column[2])
data_class
data_length
annotation_row
class(annotation_row)
lapply(annotation_row, class)
annotation_row$proteinVariantAnnotation
as.character(annotation_row$proteinVariantAnnotation)
as.factor(annotation_row$proteinVariantAnnotation)
as.character(annotation_row$proteinVariantAnnotation)
View(annot_cell)
