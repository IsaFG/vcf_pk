data_class <- class(annot_cell)
data_length <- length(annot_cell)
basic_row <- basicTable[i,]
# print (str(annot_column[i])) # testing line
if (data_length == 0) { # In case the cell would have no result for this annotation
print ("Processing empty cell")
annotated_row <- basic_row
# annotated_row[, chosen_annot] <- "No result"
} else if (data_class == "data.frame") { # In case the cell would contain a dataframe
# Apply the function  to produce a row/df from the cell
annotation_row <- simplifyDFcell(annot_cell)
# Build a row with the chosen annotation of the current variant
# and bind it to basic table
annotated_row <- cbind(basic_row, annotation_row)
} else if (data_class == "list") { # In case the cell would contain a list
annotation_row <- as.character(annot_cell)
# Build a row with the chosen annotation of the current variant
# and bind it to basic table
annotated_row <- cbind(basic_row, annotation_row)
} else {# In case the cell is not problematic
annotation_row <- annot_cell
# Build a row with the chosen annotation of the current variant
# and bind it to basic table
annotated_row <- cbind(basic_row, annotation_row)
}
print ("Building the annotated table") # testing line
chosen_annot_table <- bind_rows(chosen_annot_table, annotated_row)
i = i + 1
print("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++")# testing line
}
return(chosen_annot_table)
}
########### [Code] Determinate if running in TERR or standard R version #############
isTERR<-R.Version()
Rversion<-NULL
if (!is.null(isTERR[["TERR.version"]])) {
########### [Code] [TIBCO] Verify if the annotation has not been already loaded ######
# Load the vector with all the annotations already loaded
loaded_annotations <- loadedAnnotBlob
if (is.element(chosen_annot, loaded_annotations) == FALSE) {
########### [TIBCO] Load RinR library ###################
library(RinR)
########### [TIBCO] Determinate R interpreter location ########
Rversion <- makeREvaluator("R", RHome = "C:/Program Files/R/R-3.4.1")
############ [TIBCO] Load variables ###############
# Load the annotated table, stored in memory as a Blob Object created by script "cellbaseR_Query_getVariant"
annotVCFObject <- BlobToSObject(annotVCFTableBlob)
annotVariants_table <- annotVCFObject
# For testing prupose: you can pre-set the annotation "geneDrugInteraction"
# chosen_annot <- availableAnnots[12]
########### [TIBCO] Create the REvaluate object ########
AnnotatedTable <- REvaluate({
chosen_annot_table <- getChosenAnnotTable(chosen_annot, annotVariants_table, loaded_annotations)
chosen_annot_table
},
data = list(getChosenAnnotTable = getChosenAnnotTable, annotVariants_table = annotVCFTable, chosen_annot = chosen_annot)
# ,
# REvaluator = Rversion,
# verbose	= TRUE
)
loaded_annotations <- c(loaded_annotations, chosen_annot)
}
########### [TIBCO] [PENDING] Save the annotated table as a Blob Object #######
# annotationsBlob <- SObjectToBlob(AnnotatedTable)
# assign(paste(chosen_annot,"Table",sep=""), annotationsBlob)
} else {
########### [RStudio] Set Working directory ############
setwd("C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk")
########### [Code] [RStudio] Verify if the annotation has not been already loaded ######
# Check if there is already a file with the annotation that have been already loaded
loaded_annotation_path <- "C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\test_files\\annotatedTables\\loaded_annotations.txt"
if (file.exists(loaded_annotation_path) == FALSE){
file.create(loaded_annotation_path)
}
# Load the vector with all the annotations already loaded
loaded_annotations <- scan(loaded_annotation_path, what="character")
########### [RStudio] Choose the annoation ############
chosen_annot = availableAnnots[14]
# availableAnnots, annotVariants_table
# They should already be loaded in global environment and come from script 3.cellbaseR_Query_getVariant
if (is.element(chosen_annot, loaded_annotations) == FALSE) {
########### [RStudio] Execute main method ###########
chosen_annot_table <- getChosenAnnotTable(chosen_annot, annotVCFTable, loaded_annotations)
########### [RStudio] Save the information ###########
# Save the annotated table in a specific variable in global environment
assign(chosen_annot, chosen_annot_table)
# Save in memory that this annotation has been loaded
sink(loaded_annotation_path, append = TRUE)
cat(chosen_annot)
sink()
# Print the table in a txt file
# Works only with basic tables
file_path <- paste("C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\test_files\\annotatedTables\\annotated_table_",chosen_annot, ".txt",sep = "")
try(write.table(chosen_annot_table,file_path, append = FALSE, sep="\t",row.names=FALSE))
}
}
########### [Code] Determinate if running in TERR or standard R version #############
isTERR<-R.Version()
Rversion<-NULL
if (!is.null(isTERR[["TERR.version"]])) {
########### [Code] [TIBCO] Verify if the annotation has not been already loaded ######
# Load the vector with all the annotations already loaded
loaded_annotations <- loadedAnnotBlob
if (is.element(chosen_annot, loaded_annotations) == FALSE) {
########### [TIBCO] Load RinR library ###################
library(RinR)
########### [TIBCO] Determinate R interpreter location ########
Rversion <- makeREvaluator("R", RHome = "C:/Program Files/R/R-3.4.1")
############ [TIBCO] Load variables ###############
# Load the annotated table, stored in memory as a Blob Object created by script "cellbaseR_Query_getVariant"
annotVCFObject <- BlobToSObject(annotVCFTableBlob)
annotVariants_table <- annotVCFObject
# For testing prupose: you can pre-set the annotation "geneDrugInteraction"
# chosen_annot <- availableAnnots[12]
########### [TIBCO] Create the REvaluate object ########
AnnotatedTable <- REvaluate({
chosen_annot_table <- getChosenAnnotTable(chosen_annot, annotVariants_table, loaded_annotations)
chosen_annot_table
},
data = list(getChosenAnnotTable = getChosenAnnotTable, annotVariants_table = annotVCFTable, chosen_annot = chosen_annot)
# ,
# REvaluator = Rversion,
# verbose	= TRUE
)
loaded_annotations <- c(loaded_annotations, chosen_annot)
}
########### [TIBCO] [PENDING] Save the annotated table as a Blob Object #######
# annotationsBlob <- SObjectToBlob(AnnotatedTable)
# assign(paste(chosen_annot,"Table",sep=""), annotationsBlob)
} else {
########### [RStudio] Set Working directory ############
setwd("C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk")
########### [Code] [RStudio] Verify if the annotation has not been already loaded ######
# Check if there is already a file with the annotation that have been already loaded
loaded_annotation_path <- "C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\test_files\\annotatedTables\\loaded_annotations.txt"
if (file.exists(loaded_annotation_path) == FALSE){
file.create(loaded_annotation_path)
}
# Load the vector with all the annotations already loaded
loaded_annotations <- scan(loaded_annotation_path, what="character")
########### [RStudio] Choose the annoation ############
chosen_annot = availableAnnots[13]
# availableAnnots, annotVariants_table
# They should already be loaded in global environment and come from script 3.cellbaseR_Query_getVariant
if (is.element(chosen_annot, loaded_annotations) == FALSE) {
########### [RStudio] Execute main method ###########
chosen_annot_table <- getChosenAnnotTable(chosen_annot, annotVCFTable, loaded_annotations)
########### [RStudio] Save the information ###########
# Save the annotated table in a specific variable in global environment
assign(chosen_annot, chosen_annot_table)
# Save in memory that this annotation has been loaded
sink(loaded_annotation_path, append = TRUE)
cat(chosen_annot)
sink()
# Print the table in a txt file
# Works only with basic tables
file_path <- paste("C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\test_files\\annotatedTables\\annotated_table_",chosen_annot, ".txt",sep = "")
try(write.table(chosen_annot_table,file_path, append = FALSE, sep="\t",row.names=FALSE))
}
}
# Load the vector with all the annotations already loaded
loaded_annotations <- scan(loaded_annotation_path, what="character")
paste(chosen_annot, "/n")
paste(chosen_annot, "\n")
paste(chosen_annot, sep = "\n")
# Save in memory that this annotation has been loaded
sink(loaded_annotation_path, append = TRUE)
cat(paste(chosen_annot, sep = "\n"))
sink()
# Save in memory that this annotation has been loaded
sink(loaded_annotation_path, append = TRUE)
cat(paste(chosen_annot, sep = "\n"))
sink()
write(cat(chosen_annot),file="loaded_annotation_path",append=TRUE)
write(cat(chosen_annot),file="loaded_annotation_path",append=TRUE)
write(cat(chosen_annot),file="loaded_annotation_path",append=TRUE)
write(cat(chosen_annot),file="loaded_annotation_path",append=TRUE)
# Save in memory that this annotation has been loaded
sink(loaded_annotation_path, append = TRUE)
cat(paste(chosen_annot, sep = "\n"))
sink()
# Save in memory that this annotation has been loaded
sink(loaded_annotation_path, append = TRUE)
cat(paste(chosen_annot, sep = "\n"))
sink()
write(chosen_annot,file="loaded_annotation_path",append=TRUE)
write(chosen_annot,file="loaded_annotation_path",append=TRUE)
write(chosen_annot,file="loaded_annotation_path",append=TRUE)
write(chosen_annot,file=loaded_annotation_path,append=TRUE)
write(chosen_annot,file=loaded_annotation_path,append=TRUE)
write(chosen_annot,file=loaded_annotation_path,append=TRUE)
# Load the vector with all the annotations already loaded
loaded_annotations <- scan(loaded_annotation_path, what="character")
# Load the vector with all the annotations already loaded
loaded_annotations <- scan(loaded_annotation_path, what="character")
# Save in memory that this annotation has been loaded
write(chosen_annot,file=loaded_annotation_path,append=TRUE)
# Save in memory that this annotation has been loaded
write(chosen_annot,file=loaded_annotation_path,append=TRUE)
# Save in memory that this annotation has been loaded
write(chosen_annot,file=loaded_annotation_path,append=TRUE)
# Save in memory that this annotation has been loaded
write(chosen_annot,file=loaded_annotation_path,append=TRUE)
# Save in memory that this annotation has been loaded
write(chosen_annot,file=loaded_annotation_path,append=TRUE)
########### [Code] Main method ########
getChosenAnnotTable <- function(chosen_annot, annotVariants_table, loaded_annotations) {
############# [Code] Load libraries #############
# library(RCurl)
library(jsonlite) #
library(dplyr)
# library(tidyr)
############# [Code] Method to process cells containing a dataframe #############
# This function will convert any cell containing a dataframe in readable information
# cell_to_convert <- annot_cell # For TESTING purpose
simplifyDFcell <- function (cell_to_convert, loaded_annotations) {
# print ("Processing a dataframe") # testing line
# Create a new dataframe from the cell
cell_df <- data.frame(cell_to_convert)
# To know what classes are inside the dataframe
class_info <- lapply(cell_df, class)
classes_vec <- as.character(class_info)
# Check if there still is a dataframe inside the new dataframe
if ('data.frame' %in% classes_vec) {
cell_df <- flatten(cell_df)
class_info <- lapply(cell_df, class)
classes_vec <- as.character(class_info)
}
# Check if there is a list inside the new dataframe
i <- 1
for (class in classes_vec) {
if (class == "list") {
cell_df[,i] <- as.character(cell_df[,i])
}
i <- i + 1
}
# The result will be a new row created from the cell
return(cell_df)
}
############# [Code] Main method ############
# Get the index of the chosen annotation
index_annot <- grep(chosen_annot, colnames(annotVariants_table))
# Extract, as a single variable, the chosen annotation from the table
annot_column <- annotVariants_table[,index_annot]
# Declare the basic table
basicTable <- annotVariants_table[,1:5]
# Declare the dataframe that will contain all the info of the chosen annotation
chosen_annot_table <- data.frame()
# Determinate the class of all the cells inside the column
column_classes <- lapply(annot_column, class)
# For each cell of the annotation column, loop to extract the content of the cell
i = 1
for (annot_cell in annot_column) {
# # Print info of the cell being analyzed
# print (paste("Variant", i, "with class", class(annot_cell), "and lenght:",length(annot_cell)))
# print (paste("dimension",(dim(annot_cell))))
# Assign variables to start the analyze
data_class <- class(annot_cell)
data_length <- length(annot_cell)
basic_row <- basicTable[i,]
# print (str(annot_column[i])) # testing line
if (data_length == 0) { # In case the cell would have no result for this annotation
print ("Processing empty cell")
annotated_row <- basic_row
# annotated_row[, chosen_annot] <- "No result"
} else if (data_class == "data.frame") { # In case the cell would contain a dataframe
# Apply the function  to produce a row/df from the cell
annotation_row <- simplifyDFcell(annot_cell)
# Build a row with the chosen annotation of the current variant
# and bind it to basic table
annotated_row <- cbind(basic_row, annotation_row)
} else if (data_class == "list") { # In case the cell would contain a list
annotation_row <- as.character(annot_cell)
# Build a row with the chosen annotation of the current variant
# and bind it to basic table
annotated_row <- cbind(basic_row, annotation_row)
} else {# In case the cell is not problematic
annotation_row <- annot_cell
# Build a row with the chosen annotation of the current variant
# and bind it to basic table
annotated_row <- cbind(basic_row, annotation_row)
}
print ("Building the annotated table") # testing line
chosen_annot_table <- bind_rows(chosen_annot_table, annotated_row)
i = i + 1
print("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++")# testing line
}
return(chosen_annot_table)
}
########### [Code] Determinate if running in TERR or standard R version #############
isTERR<-R.Version()
Rversion<-NULL
if (!is.null(isTERR[["TERR.version"]])) {
########### [Code] [TIBCO] Verify if the annotation has not been already loaded ######
# Load the vector with all the annotations already loaded
loaded_annotations <- loadedAnnotBlob
if (is.element(chosen_annot, loaded_annotations) == FALSE) {
########### [TIBCO] Load RinR library ###################
library(RinR)
########### [TIBCO] Determinate R interpreter location ########
Rversion <- makeREvaluator("R", RHome = "C:/Program Files/R/R-3.4.1")
############ [TIBCO] Load variables ###############
# Load the annotated table, stored in memory as a Blob Object created by script "cellbaseR_Query_getVariant"
annotVCFObject <- BlobToSObject(annotVCFTableBlob)
annotVariants_table <- annotVCFObject
# For testing prupose: you can pre-set the annotation "geneDrugInteraction"
# chosen_annot <- availableAnnots[12]
########### [TIBCO] Create the REvaluate object ########
AnnotatedTable <- REvaluate({
chosen_annot_table <- getChosenAnnotTable(chosen_annot, annotVariants_table, loaded_annotations)
chosen_annot_table
},
data = list(getChosenAnnotTable = getChosenAnnotTable, annotVariants_table = annotVCFTable, chosen_annot = chosen_annot)
# ,
# REvaluator = Rversion,
# verbose	= TRUE
)
loaded_annotations <- c(loaded_annotations, chosen_annot)
}
########### [TIBCO] [PENDING] Save the annotated table as a Blob Object #######
# annotationsBlob <- SObjectToBlob(AnnotatedTable)
# assign(paste(chosen_annot,"Table",sep=""), annotationsBlob)
} else {
########### [RStudio] Set Working directory ############
setwd("C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk")
########### [Code] [RStudio] Verify if the annotation has not been already loaded ######
# Check if there is already a file with the annotation that have been already loaded
loaded_annotation_path <- "C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\test_files\\annotatedTables\\loaded_annotations.txt"
if (file.exists(loaded_annotation_path) == FALSE){
file.create(loaded_annotation_path)
}
# Load the vector with all the annotations already loaded
loaded_annotations <- scan(loaded_annotation_path, what="character")
########### [RStudio] Choose the annoation ############
chosen_annot = availableAnnots[13]
# availableAnnots, annotVariants_table
# They should already be loaded in global environment and come from script 3.cellbaseR_Query_getVariant
if (is.element(chosen_annot, loaded_annotations) == FALSE) {
########### [RStudio] Execute main method ###########
chosen_annot_table <- getChosenAnnotTable(chosen_annot, annotVCFTable, loaded_annotations)
########### [RStudio] Save the information ###########
# Save the annotated table in a specific variable in global environment
assign(chosen_annot, chosen_annot_table)
# Save in memory that this annotation has been loaded
write(chosen_annot,file=loaded_annotation_path,append=TRUE)
# Print the table in a txt file
# Works only with basic tables
file_path <- paste("C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\test_files\\annotatedTables\\annotated_table_",chosen_annot, ".txt",sep = "")
try(write.table(chosen_annot_table,file_path, append = FALSE, sep="\t",row.names=FALSE))
} else {
print(paste("Annotation", chosen_annot, "has already been loaded"))
}
}
########### [Code] Main method ########
getCaddScoresTable <- function(variants_table) {
############# [Code] Load libraries #############
library(RCurl)
library(jsonlite)
library(cellbaseR)
library(dplyr)
library(tidyr)
############# [Code] Build the GET URL and query CellBase (CellBaseR) ############
var_number <- nrow(variants_table)
cb <- CellBaseR()
# Initialize the annotation table
caddScores_table <- data.frame()
i <- 1
for (i in 1:var_number) {
# print (paste("Processing variant number:", i)) # this line is for testing
# Extract the first columns from the variant table, in order to build the CADD annotation table
table_first_columns <- variants_table[i,-3]
# extract the chromosome
var_chrom <- variants_table[i,1]
# extract the range
var_range <- variants_table[i,2]
# extract the ref and alt alleles
# WARNING: you could have more than one allele in each field
# so that this formula extract only the first one to do the annotation call
# IS THAT A GOOD APPROACH ?
var_refAl <- substring((variants_table[i,4]), 1, 1)
var_altAl <- substring((variants_table[i,5]), 1, 1)
# Get variant cellbase info with cellbaseR package
# the call will return as a data.frame
variant <- paste(var_chrom, ":", var_range, ":", var_refAl, ":", var_altAl, sep = "")
caddScores_row <- getCaddScores(object=cb, id=variant, param = NULL)
# Edit the table to make it readable (transpose, colname and remove unusefull column)
caddScores_row <- as.data.frame(t(caddScores_row[,2:1]))
caddScores_row <- caddScores_row[2,]
annotVariant <- cbind(table_first_columns, caddScores_row)
caddScores_table <- bind_rows(caddScores_table, annotVariant)
# warnings()
}
# Change the name of the "id" column to avoid repetition
colnames(caddScores_table) <- (c("chromosome", "start", "reference", "alternate", "cadd_raw_score", "cadd_scaled_score"))
caddScores_table[,5:6] <- sapply(caddScores_table[,5:6], as.numeric)
return(caddScores_table)
}
########### [Code] Determinate if running in TERR or standard R version #############
isTERR<-R.Version()
Rversion<-NULL
if (!is.null(isTERR[["TERR.version"]])) {
########### [TIBCO] Load RinR library ###################
library(RinR)
########### [TIBCO] Determinate R interpreter location ########
Rversion <- makeREvaluator("R", RHome = "C:/Program Files/R/R-3.4.1")
########### [TIBCO] Create the REvaluate object to execute main method ########
caddScoresTable <- REvaluate({
caddScores_table <- getCaddScoresTable(variants_table)
caddScores_table
}
, data = list(getCaddScoresTable = getCaddScoresTable, variants_table = variants_table)
# , REvaluator = Rversion
# , verbose	= TRUE
)
} else {
########### [RStudio] Set Working directory ############
setwd("C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk")
########### [RStudio] Get the variants table ############
variants_table <- read.table("C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\test_files\\variants_table.txt", header=TRUE) # for RStudio
########### [RStudio] Execute main method ###########
caddScoresTable <- getCaddScoresTable(variants_table)
print ("Done!")
########### [RStudio] Print the basic table in a txt file ###########
# Works only with basic table
try(write.table(caddScoresTable,"C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\test_files\\annotatedTables\\annotated_table_caddScores.txt", append = FALSE, sep="\t",row.names=FALSE))
}
########### [RStudio] Get the variants table ############
basic_table <- read.table("C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\test_files\\annotated_indVCF.txt", header=TRUE) # for RStudio
View(basic_table)
View(variants_table)
View(basicTable)
View(basicTable)
# Extract the first columns from the variant table, in order to build the CADD annotation table
table_first_columns <- variants_table[i,-3]
variants_table <- basic_table
variants_table[,-3]
variants_table[,-3]
variants_table[,-5]
########### [Code] Main method ########
getCaddScoresTable <- function(variants_table) {
############# [Code] Load libraries #############
library(RCurl)
library(jsonlite)
library(cellbaseR)
library(dplyr)
library(tidyr)
############# [Code] Build the GET URL and query CellBase (CellBaseR) ############
var_number <- nrow(variants_table)
cb <- CellBaseR()
# Initialize the annotation table
caddScores_table <- data.frame()
i <- 1
for (i in 1:var_number) {
# print (paste("Processing variant number:", i)) # this line is for testing
# Extract the first columns from the variant table, in order to build the CADD annotation table
table_first_columns <- variants_table[i,-5]
# extract the chromosome
var_chrom <- variants_table[i,1]
# extract the range
var_range <- variants_table[i,2]
# extract the ref and alt alleles
# WARNING: you could have more than one allele in each field
# so that this formula extract only the first one to do the annotation call
# IS THAT A GOOD APPROACH ?
var_refAl <- substring((variants_table[i,3]), 1, 1)
var_altAl <- substring((variants_table[i,4]), 1, 1)
# Get variant cellbase info with cellbaseR package
# the call will return as a data.frame
variant <- paste(var_chrom, ":", var_range, ":", var_refAl, ":", var_altAl, sep = "")
caddScores_row <- getCaddScores(object=cb, id=variant, param = NULL)
# Edit the table to make it readable (transpose, colname and remove unusefull column)
caddScores_row <- as.data.frame(t(caddScores_row[,2:1]))
caddScores_row <- caddScores_row[2,]
annotVariant <- cbind(table_first_columns, caddScores_row)
caddScores_table <- bind_rows(caddScores_table, annotVariant)
# warnings()
}
# Change the name of the "id" column to avoid repetition
colnames(caddScores_table) <- (c("chromosome", "start", "reference", "alternate", "cadd_raw_score", "cadd_scaled_score"))
caddScores_table[,5:6] <- sapply(caddScores_table[,5:6], as.numeric)
return(caddScores_table)
}
########### [Code] Determinate if running in TERR or standard R version #############
isTERR<-R.Version()
Rversion<-NULL
if (!is.null(isTERR[["TERR.version"]])) {
########### [TIBCO] Load RinR library ###################
library(RinR)
########### [TIBCO] Determinate R interpreter location ########
Rversion <- makeREvaluator("R", RHome = "C:/Program Files/R/R-3.4.1")
########### [TIBCO] Create the REvaluate object to execute main method ########
caddScoresTable <- REvaluate({
caddScores_table <- getCaddScoresTable(variants_table)
caddScores_table
}
, data = list(getCaddScoresTable = getCaddScoresTable, variants_table = variants_table)
# , REvaluator = Rversion
# , verbose	= TRUE
)
} else {
########### [RStudio] Set Working directory ############
setwd("C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk")
########### [RStudio] Get the variants table ############
basic_table <- read.table("C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\test_files\\annotated_indVCF.txt", header=TRUE) # for RStudio
########### [RStudio] Execute main method ###########
caddScoresTable <- getCaddScoresTable(basic_table)
########### [RStudio] Print the basic table in a txt file ###########
# Works only with basic table
try(write.table(caddScoresTable,"C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\test_files\\annotatedTables\\annotated_table_caddScores.txt", append = FALSE, sep="\t",row.names=FALSE))
print ("Done!")
}
View(caddScoresTable)
