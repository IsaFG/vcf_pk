# Filter from the result list the output of those queries that produced no result
# filtrar de la lista de resultados los outputs de aquellas queries que no devuelven resultado
queries_with_results<- rowSums(query_stats[,c(2,3)])>0
queries_with_results
retrieved_results<-query_result$result[queries_with_results]
retrieved_results  # CUIDADO esto cuelga R con datos masivos
sink("retrieved_results.txt")
retrieved_results
sink()
# test<-data.frame(retrieved_results[[1]]$id,retrieved_results[[1]]$name,retrieved_results[[1]]$description,retrieved_results[[1]]$drugInteractions)
test<-data.frame(retrieved_results[[1]]$id,retrieved_results[[1]]$name,retrieved_results[[1]]$description)
test
sink("tessst.txt")
test
sink()
class(retrieved_results)
do.call(rbind.data.frame, retrieved_results)
results_DF <- do.call(rbind.data.frame, retrieved_results)
sink("retrieved_results.txt")
sink()
sink("results_DF")
results_DF
sink()
class(results_DF)
# EJEMPLO 1 DEL API
# Ejemplo usando la primera variante
# que encontramos en el VCF file usado como ejemplo
#### first variant found in the VCF file used as example
#### -> chr1 - 18149476 - Ref:G and Alt:A
# COn este link obtenemos anotación para la variante seleccionada
# "http://bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/v4/hsapiens/genomic/variant/1%3A18149476%3AG%3AA/annotation?limit=-1&skip=-1&count=false&Output%20format=json&normalize=false
# version corta :
# http://bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/v4/hsapiens/genomic/variant/1%3A18149476%3AG%3AA/annotation
library(RCurl)
library(jsonlite)
# guardar el enlace en el objeto query. Para eso se usa la funcion geturl de Rcurl, que descarga URLs
query<-getURL("http://bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/v4/hsapiens/genomic/variant/1%3A18149476%3AG%3AA/annotation")
# esta direccion se puede pegar en el navegador para ver la pinta que tiene
# TEST CON OTRA URL
# query <-getURL("bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/latest/hsapiens/genomic/region/1:18149476-18149476/gene")
# en esta query tenemos lo que es el JSON. Tipo : Large character
query # podemos mostrar el JSON en pantalla
sink("query.txt")
query
sink()
# almacenamos el contenido json de la url en un objeto tipo lista
# este objeto contiene pues toda la informacion de los genes solicitados
querydf<-fromJSON(query)
querydf # CUIDADO esto cuelga R con datos masivos
sink("querydf.txt")
querydf
sink()
## NOTA : warning, error y response estan en la primera linea de la URL
## NOTA : el contenido response es todo el resto
#Get any warnings that may be worth noting
query_warnings<-querydf$warning
#Get any errors produced by the query
query_errors<-querydf$error
# conseguir la respuesta a la query
# nos da un query_result de 3 observaciones (los genes) de 9 variables
query_result<-querydf$response
query_result  # CUIDADO esto cuelga R con datos masivos
sink("query_result.txt")
query_result
sink()
# Create a table with the number of responses from each of the queries:
# crear una tabla con el numero de respuestas para cada una de las queries
query_stats<-data.frame(query_result[c("id","numTotalResults","numResults")])
names(query_stats)[1]<-"query"
query_stats
sink("query_stats.txt")
query_stats
sink()
# Filter from the result list the output of those queries that produced no result
# filtrar de la lista de resultados los outputs de aquellas queries que no devuelven resultado
queries_with_results<- rowSums(query_stats[,c(2,3)])>0
queries_with_results
retrieved_results<-query_result$result[queries_with_results]
retrieved_results  # CUIDADO esto cuelga R con datos masivos
sink("retrieved_results.txt")
retrieved_results
sink()
class(retrieved_results)
results_DF <- do.call(rbind.data.frame, retrieved_results)
sink("results_DF")
results_DF
sink()
class(results_DF)
# test<-data.frame(retrieved_results[[1]]$id,retrieved_results[[1]]$name,retrieved_results[[1]]$description,retrieved_results[[1]]$drugInteractions)
test<-data.frame(retrieved_results[[1]]$id,retrieved_results[[1]]$name,retrieved_results[[1]]$description)
test
sink("tessst.txt")
test
sink()
# EJEMPLO 1 DEL API
# Ejemplo usando la primera variante
# que encontramos en el VCF file usado como ejemplo
#### first variant found in the VCF file used as example
#### -> chr1 - 18149476 - Ref:G and Alt:A
# COn este link obtenemos anotación para la variante seleccionada
# "http://bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/v4/hsapiens/genomic/variant/1%3A18149476%3AG%3AA/annotation?limit=-1&skip=-1&count=false&Output%20format=json&normalize=false
# version corta :
# http://bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/v4/hsapiens/genomic/variant/1%3A18149476%3AG%3AA/annotation
library(RCurl)
library(jsonlite)
# guardar el enlace en el objeto query. Para eso se usa la funcion geturl de Rcurl, que descarga URLs
query<-getURL("http://bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/v4/hsapiens/genomic/variant/1%3A18149476%3AG%3AA/annotation")
# esta direccion se puede pegar en el navegador para ver la pinta que tiene
# TEST CON OTRA URL
# query <-getURL("bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/latest/hsapiens/genomic/region/1:18149476-18149476/gene")
# en esta query tenemos lo que es el JSON. Tipo : Large character
query # podemos mostrar el JSON en pantalla
sink("query.txt")
query
sink()
# almacenamos el contenido json de la url en un objeto tipo lista
# este objeto contiene pues toda la informacion de los genes solicitados
querydf<-fromJSON(query)
querydf # CUIDADO esto cuelga R con datos masivos
sink("querydf.txt")
querydf
sink()
## NOTA : warning, error y response estan en la primera linea de la URL
## NOTA : el contenido response es todo el resto
#Get any warnings that may be worth noting
query_warnings<-querydf$warning
#Get any errors produced by the query
query_errors<-querydf$error
# conseguir la respuesta a la query
# nos da un query_result de 3 observaciones (los genes) de 9 variables
query_result<-querydf$response
query_result  # CUIDADO esto cuelga R con datos masivos
sink("query_result.txt")
query_result
sink()
# Create a table with the number of responses from each of the queries:
# crear una tabla con el numero de respuestas para cada una de las queries
query_stats<-data.frame(query_result[c("id","numTotalResults","numResults")])
names(query_stats)[1]<-"query"
query_stats
sink("query_stats.txt")
query_stats
sink()
# Filter from the result list the output of those queries that produced no result
# filtrar de la lista de resultados los outputs de aquellas queries que no devuelven resultado
queries_with_results<- rowSums(query_stats[,c(2,3)])>0
queries_with_results
retrieved_results<-query_result$result[queries_with_results]
retrieved_results  # CUIDADO esto cuelga R con datos masivos
sink("retrieved_results.txt")
retrieved_results
sink()
class(retrieved_results)
results_DF <- do.call(rbind.data.frame, retrieved_results)
sink("results_DF")
results_DF
sink()
class(results_DF)
# test<-data.frame(retrieved_results[[1]]$id,retrieved_results[[1]]$name,retrieved_results[[1]]$description,retrieved_results[[1]]$drugInteractions)
test<-data.frame(retrieved_results[[1]]$id,retrieved_results[[1]]$name,retrieved_results[[1]]$description)
test
sink("tessst.txt")
test
sink()
# EJEMPLO 1 DEL API
# Ejemplo usando la primera variante
# que encontramos en el VCF file usado como ejemplo
#### first variant found in the VCF file used as example
#### -> chr1 - 18149476 - Ref:G and Alt:A
# COn este link obtenemos anotación para la variante seleccionada
# "http://bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/v4/hsapiens/genomic/variant/1%3A18149476%3AG%3AA/annotation?limit=-1&skip=-1&count=false&Output%20format=json&normalize=false
# version corta :
# http://bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/v4/hsapiens/genomic/variant/1%3A18149476%3AG%3AA/annotation
library(RCurl)
library(jsonlite)
# guardar el enlace en el objeto query. Para eso se usa la funcion geturl de Rcurl, que descarga URLs
query<-getURL("http://bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/v4/hsapiens/genomic/variant/1%3A18149476%3AG%3AA/annotation")
# esta direccion se puede pegar en el navegador para ver la pinta que tiene
# TEST CON OTRA URL
# query <-getURL("bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/latest/hsapiens/genomic/region/1:18149476-18149476/gene")
# en esta query tenemos lo que es el JSON. Tipo : Large character
query # podemos mostrar el JSON en pantalla
sink("query.txt")
query
sink()
# almacenamos el contenido json de la url en un objeto tipo lista
# este objeto contiene pues toda la informacion de los genes solicitados
querydf<-fromJSON(query)
querydf # CUIDADO esto cuelga R con datos masivos
sink("querydf.txt")
querydf
sink()
## NOTA : warning, error y response estan en la primera linea de la URL
## NOTA : el contenido response es todo el resto
#Get any warnings that may be worth noting
query_warnings<-querydf$warning
#Get any errors produced by the query
query_errors<-querydf$error
# conseguir la respuesta a la query
# nos da un query_result de 3 observaciones (los genes) de 9 variables
query_result<-querydf$response
query_result  # CUIDADO esto cuelga R con datos masivos
sink("query_result.txt")
query_result
sink()
# Create a table with the number of responses from each of the queries:
# crear una tabla con el numero de respuestas para cada una de las queries
query_stats<-data.frame(query_result[c("id","numTotalResults","numResults")])
names(query_stats)[1]<-"query"
query_stats
sink("query_stats.txt")
query_stats
sink()
# Filter from the result list the output of those queries that produced no result
# filtrar de la lista de resultados los outputs de aquellas queries que no devuelven resultado
queries_with_results<- rowSums(query_stats[,c(2,3)])>0
queries_with_results
retrieved_results<-query_result$result[queries_with_results]
retrieved_results  # CUIDADO esto cuelga R con datos masivos
sink("retrieved_results.txt")
retrieved_results
sink()
class(retrieved_results)
results_DF <- do.call(rbind.data.frame, retrieved_results)
sink("results_DF")
results_DF
sink()
class(results_DF)
# test<-data.frame(retrieved_results[[1]]$id,retrieved_results[[1]]$name,retrieved_results[[1]]$description,retrieved_results[[1]]$drugInteractions)
test<-data.frame(retrieved_results[[1]]$id,retrieved_results[[1]]$name,retrieved_results[[1]]$description)
test
sink("tessst.txt")
test
sink()
# EJEMPLO 1 DEL API
# Ejemplo usando la primera variante
# que encontramos en el VCF file usado como ejemplo
#### first variant found in the VCF file used as example
#### -> chr1 - 18149476 - Ref:G and Alt:A
# COn este link obtenemos anotación para la variante seleccionada
# "http://bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/v4/hsapiens/genomic/variant/1%3A18149476%3AG%3AA/annotation?limit=-1&skip=-1&count=false&Output%20format=json&normalize=false
# version corta :
# http://bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/v4/hsapiens/genomic/variant/1%3A18149476%3AG%3AA/annotation
library(RCurl)
library(jsonlite)
# guardar el enlace en el objeto query. Para eso se usa la funcion geturl de Rcurl, que descarga URLs
query<-getURL("http://bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/v4/hsapiens/genomic/variant/1%3A18149476%3AG%3AA/annotation")
# esta direccion se puede pegar en el navegador para ver la pinta que tiene
# TEST CON OTRA URL
# query <-getURL("bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/latest/hsapiens/genomic/region/1:18149476-18149476/gene")
# en esta query tenemos lo que es el JSON. Tipo : Large character
query # podemos mostrar el JSON en pantalla
sink("query.txt")
query
sink()
# almacenamos el contenido json de la url en un objeto tipo lista
# este objeto contiene pues toda la informacion de los genes solicitados
querydf<-fromJSON(query)
querydf # CUIDADO esto cuelga R con datos masivos
sink("querydf.txt")
querydf
sink()
## NOTA : warning, error y response estan en la primera linea de la URL
## NOTA : el contenido response es todo el resto
#Get any warnings that may be worth noting
query_warnings<-querydf$warning
#Get any errors produced by the query
query_errors<-querydf$error
# conseguir la respuesta a la query
# nos da un query_result de 3 observaciones (los genes) de 9 variables
query_result<-querydf$response
query_result  # CUIDADO esto cuelga R con datos masivos
sink("query_result.txt")
query_result
sink()
# Create a table with the number of responses from each of the queries:
# crear una tabla con el numero de respuestas para cada una de las queries
query_stats<-data.frame(query_result[c("id","numTotalResults","numResults")])
names(query_stats)[1]<-"query"
query_stats
sink("query_stats.txt")
query_stats
sink()
# Filter from the result list the output of those queries that produced no result
# filtrar de la lista de resultados los outputs de aquellas queries que no devuelven resultado
queries_with_results<- rowSums(query_stats[,c(2,3)])>0
queries_with_results
retrieved_results<-query_result$result[queries_with_results]
retrieved_results  # CUIDADO esto cuelga R con datos masivos
sink("retrieved_results.txt")
retrieved_results
sink()
class(retrieved_results)
results_DF <- do.call(rbind.data.frame, retrieved_results)
sink("results_DF")
results_DF
sink()
class(results_DF)
# test<-data.frame(retrieved_results[[1]]$id,retrieved_results[[1]]$name,retrieved_results[[1]]$description,retrieved_results[[1]]$drugInteractions)
test<-data.frame(retrieved_results[[1]]$id,retrieved_results[[1]]$name,retrieved_results[[1]]$description)
test
sink("tessst.txt")
test
sink()
asFrame <- do.call("rbind.fill", lapply(querydf, as.data.frame))
asDataFrame <- fromJSON(query) %>% as.data.frame
install.packages("magrittr")
install.packages("data.tree")
library(GenomicAlignments)
library(VariantAnnotation)
my_vcf <- "C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\R_2015_01_27_14_48_49_user_XEN-66-Haloplex_316_Nefro_pool24_124_2305.vcf"
vcf_extracted <- readVcf(my_vcf, "hg19")
GRsize <- 5
vcfGRanges <- head(rowRanges(vcf_extracted), GRsize)
sink("test_files\\vcfGRanges.txt")
setwd("C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk")
sink("test_files\\vcfGRanges.txt")
vcfGRanges
sink()
GRranges <- as.character(ranges(vcfGRanges))
GRchroms_chr <- as.character(seqnames(vcfGRanges))
GRREFal <- as.character(REF(vcfGRanges))
GRALTal <- as.character(ALT(vcfGRanges))
GRREFal <- as.character(paramRangeID(vcfGRanges))
data.frame(vcfGRanges)
GRangesdf <- data.frame(vcfGRanges)
GRangesdf$seqnames
View(GRangesdf)
sink("test_files\\GRangesdf.txt")
GRangesdf
sink()
sink("test_files\\GRangesdf.txt")
write.table(GRangesdf,"test_files\\GRangesdf.txt",sep="\t",row.names=FALSE)
sink()
GRangesdf$ALT
GRangesdf$start
GRangesdf$end
GRangesdf$REF
ALT_allele <- GRangesdf$ALT
ALT_allele[[1]]
test <- ALT_allele[[1]]
test
test[1]
data.frame(ALT_allele)
data.frame(GRangesdf$ALT)
ATLdf <- data.frame(GRangesdf$ALT)
View(ATLdf)
ATLdf[1]
ATLdf[2]
ATLdf[,2]
ATLdf[1,2]
ATLdf[1,1]
ATLdf[2,1]
View(ATLdf)
View(ATLdf)
print(ATLdf[2,1])
my_vcf <- "C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\R_2015_01_27_14_48_49_user_XEN-66-Haloplex_316_Nefro_pool24_124_2305.vcf"
vcf_extracted <- readVcf(my_vcf, "hg19")
GRsize <- 5
vcfGRanges <- head(rowRanges(vcf_extracted), GRsize)
GRangesdf <- data.frame(vcfGRanges)
View(GRangesdf)
ATLdf <- data.frame(GRangesdf$ALT)
print(ATLdf[2,1])
ALTdf
ALTdf <- data.frame(GRangesdf$ALT)
print(ALTdf[2,1])
ALTdf
class(ALTdf)
GRangesdf$ALT
class(GRangesdf$ALT)
View(ALTdf)
str(ALTdf)
ALTdf
sink("test_files\\ALTdf.txt")
str(ALTdf)
sink()
GRREFal <- as.character(GRangesdf$REF)
GRranges <- as.character(ranges(vcfGRanges))
GRchroms_chr <- as.character(seqnames(vcfGRanges))
GRchroms_chr <- as.character(seqnames(vcfGRanges))
string_to_remove <- "chr"
GRchroms <- gsub(x = GRchroms_chr, pattern = paste(string_to_remove, collapse = "|"), replacement = "")
sink("test_files\\vcfGRanges_str.txt")
vcfGRanges
sink()
sink("test_files\\vcfGRanges_str.txt")
str(vcfGRanges)
sink()
my_vcf <- "C:\\Users\\FollonIn\\Documents\\GitHub\\vcf_pk\\R_2015_01_27_14_48_49_user_XEN-66-Haloplex_316_Nefro_pool24_124_2305.vcf"
vcf_extracted <- readVcf(my_vcf, "hg19")
GRsize <- 5 # number of variant to be extracted
vcfGRanges <- head(rowRanges(vcf_extracted), GRsize)
sink("test_files\\vcfGRanges.txt")
vcfGRanges
sink()
GRangesdf <- data.frame(vcfGRanges)
GRranges <- as.character(ranges(vcfGRanges))
GRchroms_chr <- as.character(seqnames(vcfGRanges))
string_to_remove <- "chr"
GRchroms <- gsub(x = GRchroms_chr, pattern = paste(string_to_remove, collapse = "|"), replacement = "")
GRREFal <- as.character(GRangesdf$REF)
class(GRangesdf$ALT)
GRangesdf$ALT
ALTdf <- data.frame(GRangesdf$ALT)
ALTdf
GRALTal <- c("A", "T", "A", "G", "A")
vcfDataframe <- data.frame(GRchroms, GRranges, GRREFal, GRALTal)
write.table(vcfDataframe,"test_files\\Crom_Loc_Aleles_table.txt",sep="\t",row.names=FALSE)
write.table(vcfDataframe,"test_files\\Chrom_Loc_Aleles_table.txt",sep="\t",row.names=FALSE)
write.table(vcfDataframe,"test_files\\Loc_Alleles_variants_table.txt",sep="\t",row.names=FALSE)
write.table(vcfDataframe,"test_files\\variants_table.txt",sep="\t",row.names=FALSE)
variant_table <- read.table("test_files\\variants_table.txt", header=TRUE)
var_number <- nrow(variant_table)
query_vector <-character()
library(RCurl)
library(jsonlite)
common_URL <- "http://bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/v4/hsapiens/"
category_URL <- "genomic/variant/"
subcategory_URL <- "/annotation"
parameters_table <- read.table("test_files\\param_mtrx.txt", header=TRUE)
param_number <- nrow(parameters_table)
parameters_URL <- "limit=-1&skip=-1&skipCount=false&count=false&Output%20format=json&normalize=false&phased=false&useCache=false&imprecise=true&svExtraPadding=0&cnvExtraPadding=0"
param_coded_table <- parameters_table
variant_table <- read.table("test_files\\CromAndLocation_table.txt", header=TRUE)
variant_table <- read.table("test_files\\variants_table.txt", header=TRUE)
var_number <- nrow(variant_table)
query_vector <-character()
URL_vector <- character()
for (i in 1:var_number) {
var_chrom <- variant_table[i,1]
var_range <- variant_table[i,2]
var_refAl <- variant_table[i,3]
var_altAl <- variant_table[i,3]
# ANIADIR AQUI EL CODIGO PARA EXTRAER LOS ALELOS DE REF Y ALT
# colon_separator <- "%3A" # not necessary
variant_URL <- paste(var_chrom,"%3A",var_range,"%3A",var_refAl,"%3A",var_altAl,sep = "")
URL_base <- paste(common_URL,category_URL,variant_URL,subcategory_URL,"?",parameters_URL,sep = "")
URL_vector <- c(URL_vector, URL_base)
query_v <- getURL(URL_base)
query_vector <- c(query_vector, query_v)
print (paste("This is the i value: ", i)) # this line os for testing
}
query_vector
variant_table$URL <- URL_vector
View(variant_table)
for (i in 1:var_number) {
var_chrom <- variant_table[i,1]
var_range <- variant_table[i,2]
var_refAl <- variant_table[i,3]
var_altAl <- variant_table[i,4]
# ANIADIR AQUI EL CODIGO PARA EXTRAER LOS ALELOS DE REF Y ALT
# colon_separator <- "%3A" # not necessary
variant_URL <- paste(var_chrom,"%3A",var_range,"%3A",var_refAl,"%3A",var_altAl,sep = "")
URL_base <- paste(common_URL,category_URL,variant_URL,subcategory_URL,"?",parameters_URL,sep = "")
URL_vector <- c(URL_vector, URL_base)
query_v <- getURL(URL_base)
query_vector <- c(query_vector, query_v)
print (paste("Processing variant number:", i)) # this line os for testing
}
query_vector
variant_table$URL <- URL_vector
variant_table <- read.table("test_files\\variants_table.txt", header=TRUE)
variant_table$URL <- URL_vector
query_vector[1]
common_URL <- "http://bioinfo.hpc.cam.ac.uk/cellbase/webservices/rest/v4/hsapiens/"
category_URL <- "genomic/variant/"
subcategory_URL <- "/annotation"
parameters_table <- read.table("test_files\\param_mtrx.txt", header=TRUE)
param_number <- nrow(parameters_table)
parameters_URL <- "limit=-1&skip=-1&skipCount=false&count=false&Output%20format=json&normalize=false&phased=false&useCache=false&imprecise=true&svExtraPadding=0&cnvExtraPadding=0"
param_coded_table <- parameters_table
variant_table <- read.table("test_files\\CromAndLocation_table.txt", header=TRUE)
variant_table <- read.table("test_files\\variants_table.txt", header=TRUE)
var_number <- nrow(variant_table)
query_vector <-character()
URL_vector <- character()
for (i in 1:var_number) {
var_chrom <- variant_table[i,1]
var_range <- variant_table[i,2]
var_refAl <- variant_table[i,3]
var_altAl <- variant_table[i,4]
# ANIADIR AQUI EL CODIGO PARA EXTRAER LOS ALELOS DE REF Y ALT
# colon_separator <- "%3A" # not necessary
variant_URL <- paste(var_chrom,"%3A",var_range,"%3A",var_refAl,"%3A",var_altAl,sep = "")
URL_base <- paste(common_URL,category_URL,variant_URL,subcategory_URL,"?",parameters_URL,sep = "")
URL_vector <- c(URL_vector, URL_base)
query_v <- getURL(URL_base)
query_vector <- c(query_vector, query_v)
print (paste("Processing variant number:", i)) # this line os for testing
}
variant_table$URL <- URL_vector
query_vector[1]
View(variant_table)
library(cellbaseR)
cb <- CellBaseR()
res <- getCellBase(object=cb, category="feature", subcategory="gene",
ids="TET1", resource="info")
library("cellbaseR", lib.loc="C:/Program Files/R/R-3.4.1/library")
detach("package:cellbaseR", unload=TRUE)
library("cellbaseR", lib.loc="C:/Program Files/R/R-3.4.1/library")
detach("package:cellbaseR", unload=TRUE)
source('~/.active-rstudio-document')
cb <- CellBaseR()
genes <- c("TP73","TET1")
res <- getGene(object = cb, ids = genes, resource = "info")
View(res)
cb <- CellBaseR()
res2 <- getVariant(object=cb, ids="1:169549811:A:G", resource="annotation")
res2 <- cbData(res2)
str(res2, 1)
View(res2)
